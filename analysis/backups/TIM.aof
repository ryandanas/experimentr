*2
$6
SELECT
$1
0
*10
$5
HMSET
$8
io3lsi9k
$6
postId
$8
io3lsi9k
$21
time_start_experiment
$13
1463015730304
$8
workerId
$6
iboros
$9
timestamp
$13
1463015747703
*10
$5
HMSET
$8
inrv4js8
$6
postId
$8
inrv4js8
$21
time_start_experiment
$13
1462305814578
$8
workerId
$5
debug
$9
timestamp
$13
1462305817021
*10
$5
HMSET
$8
ins8kwvw
$6
postId
$8
ins8kwvw
$21
time_start_experiment
$13
1462328413059
$8
workerId
$5
debug
$9
timestamp
$13
1462328416564
*28
$5
HMSET
$8
inont1qu
$9
timestamp
$13
1462112167188
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$5
35370
$6
postId
$8
inont1qu
$21
time_start_experiment
$13
1462112122140
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462112164806
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$0

$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462112129436
$8
workerId
$3
dan
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
FAIL
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
8
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$46
1065,18286,26256,27894,30657,32079,33834,35369
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$3039
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
*52
$5
HMSET
$8
inw0l7w3
$8
comments
$20
Leave feedback here 
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462567009909
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462567311558
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inw0l7w3
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3361,218295
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
B01044526
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$324
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462567228205
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462567319543
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
218296
$20
time_diff_experiment
$8
10456462
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462561795016
$21
time_start_experiment
$13
1462556855096
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1223
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$12
3228,5045610
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$7
5045611
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$83278
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 al 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: S 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: St 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Stu 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Stud 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Stude 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Studen 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in e
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant fo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant fo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_fo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for i
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for im
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for impl
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for impli
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in A
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in e
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: Student |
   s in assistant_for implies s not in enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {

}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assign
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in asso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in assoc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associa
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_w
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_wit
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistn
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant fo
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistantfor
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     assigned_to in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     noassigned_to in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     notassigned_to in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462566840627
*10
$5
HMSET
$8
insyxyuy
$6
postId
$8
insyxyuy
$21
time_start_experiment
$13
1462372692164
$8
workerId
$1
d
$9
timestamp
$13
1462372695601
*10
$5
HMSET
$8
insyyv0l
$6
postId
$8
insyyv0l
$21
time_start_experiment
$13
1462372733836
$8
workerId
$1
d
$9
timestamp
$13
1462372735898
*10
$5
HMSET
$8
insy17au
$6
postId
$8
insy17au
$21
time_start_experiment
$13
1462371163456
$8
workerId
$1
d
$9
timestamp
$13
1462371165839
*10
$5
HMSET
$8
inm60sbh
$6
postId
$8
inm60sbh
$21
time_start_experiment
$13
1461961317736
$8
workerId
$5
debug
$9
timestamp
$13
1461961321908
*10
$5
HMSET
$8
insz0nag
$6
postId
$8
insz0nag
$21
time_start_experiment
$13
1462372817139
$8
workerId
$1
d
$9
timestamp
$13
1462372819177
*52
$5
HMSET
$8
io297dny
$8
comments
$504
I usually like visual presentations of data, but I often find it hard to parse out an Alloy visualization for a non-trivial instance, usually when there are multiple types of overlapping edges.  Instead, I often rely on the tree view and the evaluator, which let me explore an instance gradually by expanding different sigs and interactively test how certain functions, preds, or joins will behave.  I also find the text view useful, often just to see specific sigs that led to a counterexample.

Thanks!
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$19
2848,963489,1105779
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1078
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	(some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
      	(some lookup[n] & Addr)
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
423186
$19
time_end_experiment
$13
1462936262023
$6
postId
$8
io297dny
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$32687
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s no
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s not 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s not
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s no
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s n
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s no
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not i
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.sc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.ass
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.assoc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associa
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.e
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.en
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enr
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enro
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrol
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolle
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled)
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) an
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) and
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) and
	()s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) and
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) and
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462934559937
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462935956595
$8
workerId
$8
ndemarin
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3562,423186
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462934850816
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462936882379
$20
time_diff_experiment
$7
2139028
$21
time_start_experiment
$13
1462934122995
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462934136751
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$7
1105779
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1193
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	(s not in a.associated_with.enrolled) and
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$17752
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | ()
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | (s)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | (sm)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | (s)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | ()
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | (
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some looki
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	)some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | 
      	(some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | 
      	(some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: Name | 
      	(some lookup[n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
      	(some lookup[n] & Addr)
}
*10
$5
HMSET
$8
insz59ch
$6
postId
$8
insz59ch
$21
time_start_experiment
$13
1462373032348
$8
workerId
$1
f
$9
timestamp
$13
1462373034266
*10
$5
HMSET
$8
inm6okc9
$6
postId
$8
inm6okc9
$21
time_start_experiment
$13
1461962427136
$8
workerId
$5
dfsdf
$9
timestamp
$13
1461962447087
*10
$5
HMSET
$8
inszg9ea
$6
postId
$8
inszg9ea
$21
time_start_experiment
$13
1462373545629
$8
workerId
$1
d
$9
timestamp
$13
1462373548729
*10
$5
HMSET
$8
innnqfdb
$6
postId
$8
innnqfdb
$21
time_start_experiment
$13
1462051533652
$8
workerId
$5
dfsdf
$9
timestamp
$13
1462051553990
*52
$5
HMSET
$8
intr8wm5
$8
comments
$135
I don't think I understood the second model as clearly, and thus I'm not sure my solution actually was the best decision for the model.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$18
2795,160114,291525
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1067
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
some sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lookup[n] 
        }
    }
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
160981
$19
time_end_experiment
$13
1462420762461
$6
postId
$8
intr8wm5
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$46172
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled,: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, : set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, as: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, ass: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assi: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assis: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assista: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistan: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_f: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: diset Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disset Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disjset Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disj set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disj set Student, 

	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled,assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolledassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled:assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: seassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: setassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Sassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Stassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Studassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Studeassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Studenassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Studentassistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
      assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
     assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for:  set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled |  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | { 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
      
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
      
      
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
      
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s  
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in  
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in as 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in ass 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assi 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assist 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assista 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistan 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistantF 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant_ 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant_f 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant_for 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462420411627
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462420743505
$8
workerId
$7
ecatlin
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$18
3723,110292,160980
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462420451979
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462420792483
$20
time_diff_experiment
$6
530739
$21
time_start_experiment
$13
1462420231722
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462420250646
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
291526
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1769
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled, assistant_for: disj set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student,
    assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no s: enrolled | {
     	s in assistant_for 
    }
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$22047
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sosig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
somsig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
somesig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
some sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n,
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
      
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
      
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	so 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some  
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a:  
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: A 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Ad 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Add 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr  
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr |  
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | { 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
          
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
          
          
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
          
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a  
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in  
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in l 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lo 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in look 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lookup 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lookup[ 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lookup[n 
        }
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | {
     	some a: Addr | {
         	a in lookup[n] 
        }
    }
}
*10
$5
HMSET
$8
intklqwt
$6
postId
$8
intklqwt
$21
time_start_experiment
$13
1462409073544
$8
workerId
$7
fffoooo
$9
timestamp
$13
1462409081728
*10
$5
HMSET
$8
insz46dy
$6
postId
$8
insz46dy
$21
time_start_experiment
$13
1462372981855
$8
workerId
$1
g
$9
timestamp
$13
1462372985111
*28
$5
HMSET
$8
io3iunh9
$9
timestamp
$13
1463011452056
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
288377
$6
postId
$8
io3iunh9
$21
time_start_experiment
$13
1463010791525
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463011085812
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$148685
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.asso
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associ
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associa
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associate
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_w
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_wi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_wit
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assis
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assista
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistan
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_fo
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for =
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for =>
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in P
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Pr
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Pro
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Prof
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Profe
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Profes
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Profess
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for => s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for i s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for if s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of an
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s n
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not i
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.as
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.ass
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.asso
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.assoc
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associa
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associate
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_w
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_wi
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.e
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.en
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enr
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enro
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrol
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enroll
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolle
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s n
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.a
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.as
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.ass
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.asso
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assoc
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associ
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associa
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associate
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated.w
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_w
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_wi
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_wit
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_with
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.associated_with.
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.ass
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.as
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.ass
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assi
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assig
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assign
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigne
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned t
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned_
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned_t
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned_to
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.assigned_to)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.a)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not i)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not )
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s no)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not in a.associated_with.enrolled and s not in a.a)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s not)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s no)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s n)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s )
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and s)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and )
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of and)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of an)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of a)
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of )
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of 
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or (s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for  or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for a) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for an) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s n) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s no) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.a) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.as) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.ass) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.asso) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associ) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associa) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associate) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associated) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associated_) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associated_t) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and s not in a.associated_to) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_to) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_t) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_w) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_wi) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_wit) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.) or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for a or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for an or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s n or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not i or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a. or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.a or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.as or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.asso or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.assoc or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associ or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associa or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associate or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_ or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_w or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_wi or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with. or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.e or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.en or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enr or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enro or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrol or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enroll or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolle or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of 
}
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463010797435
$8
workerId
$4
llu3
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
3
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$17
3295,71186,288377
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1822
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no a.associated_with.assistant_for iff s in Professor
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of 
}
*28
$5
HMSET
$8
inszkkrh
$9
timestamp
$13
1462373758437
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$4
7706
$6
postId
$8
inszkkrh
$21
time_start_experiment
$13
1462373746987
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373756946
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$2141
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
 or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
r s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
 s in a.associated_with.instructor_of 
}
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373749240
$8
workerId
$2
df
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$9
2451,7706
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1107
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
 s in a.associated_with.instructor_of 
}
*10
$5
HMSET
$8
insz8cp8
$6
postId
$8
insz8cp8
$21
time_start_experiment
$13
1462373176661
$8
workerId
$1
d
$9
timestamp
$13
1462373178561
*10
$5
HMSET
$8
insz8g52
$6
postId
$8
insz8g52
$21
time_start_experiment
$13
1462373181119
$8
workerId
$1
f
$9
timestamp
$13
1462373183274
*28
$5
HMSET
$8
io2317uh
$9
timestamp
$13
1463008405581
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462923800798
$6
postId
$8
io2317uh
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$21
time_start_experiment
$13
1462923757822
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$13
4641,84563646
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1196
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$8
84563646
$8
workerId
$9
100705901
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463008364444
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$29240
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 al 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: ent 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
*10
$5
HMSET
$8
innhnbsw
$6
postId
$8
innhnbsw
$21
time_start_experiment
$13
1462041311365
$8
workerId
$3
Dan
$9
timestamp
$13
1462041319858
*10
$5
HMSET
$8
insz88ft
$6
postId
$8
insz88ft
$21
time_start_experiment
$13
1462373171139
$8
workerId
$2
ff
$9
timestamp
$13
1462373173455
*10
$5
HMSET
$8
inkcskfa
$6
postId
$8
inkcskfa
$21
time_start_experiment
$13
1461851759214
$8
workerId
$5
debug
$9
timestamp
$13
1461851762784
*28
$5
HMSET
$8
inomuyd2
$9
timestamp
$13
1462112170155
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462110536651
$6
postId
$8
inomuyd2
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
3
$21
time_start_experiment
$13
1462110531451
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$20
1334,1610725,1624949
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$991
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 

},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s != s
}
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$7
1624950
$8
workerId
$11
NEWPROPERTY
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462112161601
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$6817
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 

},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s ! 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !=
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s != a
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s != 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !=
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s =
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s !=
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  s != s
}
*10
$5
HMSET
$8
inszfa0k
$6
postId
$8
inszfa0k
$21
time_start_experiment
$13
1462373499777
$8
workerId
$1
f
$9
timestamp
$13
1462373501959
*10
$5
HMSET
$8
io29iujq
$6
postId
$8
io29iujq
$21
time_start_experiment
$13
1462934658092
$8
workerId
$8
ndemarin
$9
timestamp
$13
1462934663006
*52
$5
HMSET
$8
intmbc9n
$8
comments
$184
The countdown on attempts stood out since part of the philosophy of tools like Alloy seems to be just running things very frequently, even after tiny changes, just to see what happens.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$25
2233,132852,160135,216480
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1441
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_of
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
305906
$19
time_end_experiment
$13
1462412732724
$6
postId
$8
intmbc9n
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$54047
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	nos in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	not s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	-not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in asso
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associ
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associa
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associat
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associate
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_w
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_wi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_wit
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in associated_with.assis
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in aassociated_with.assis
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assis
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assist
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistan
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_f
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_fo
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--not s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--nots in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--nos in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	--s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
      s not in a.associated_with.assistant_for
      s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of

},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - asso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associa
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associat
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_w
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_wit
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_fo
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462412266002
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462412571292
$8
workerId
$8
bnavetta
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$18
5929,195094,305905
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462412354812
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462412816292
$20
time_diff_experiment
$6
785489
$21
time_start_experiment
$13
1462411947235
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
4
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462411960096
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
216480
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1757
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$25531
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some enttarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entrtarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entrytarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_oftarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_of.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_o.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_i.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n-
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->T
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_f
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
    all n: entry_in | some n->Target & target_of
}
*10
$5
HMSET
$8
inszcv2o
$6
postId
$8
inszcv2o
$21
time_start_experiment
$13
1462373387099
$8
workerId
$1
t
$9
timestamp
$13
1462373389501
*52
$5
HMSET
$8
inut46q1
$8
comments
$26
Thanks for a great course!
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462484194981
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462484728411
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inut46q1
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$651
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3385,388842
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
100633136
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$6781
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Targe
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Targ
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Tar
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Ta
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone T
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone 
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone A
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Ad
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Add
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Add
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Ad
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone A
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone 
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone T
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Tar
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Targ
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462484583823
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462484752464
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
388842
$20
time_diff_experiment
$6
891468
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462483865744
$21
time_start_experiment
$13
1462483836943
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1179
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4186,178013
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
178013
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$41299
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 n 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled &&  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && asi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && asis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled && 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no en
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enroll
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no en
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no e
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for

}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462484043757
*52
$5
HMSET
$8
int8ag1z
$8
comments
$57
It would have been helpful to have the evaluator as well.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$18
2452,287636,737281
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1037
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & Addr)
    }
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
570178
$19
time_end_experiment
$13
1462389907854
$6
postId
$8
int8ag1z
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$31510
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	ss in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s nos in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not ins in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in as in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.as in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.ass in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.asss in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assos in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assocs in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associs in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associas in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associates in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associateds in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_ws in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_wos in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_ws in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_wis in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_withs in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_with.s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_tos in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to ans in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to and s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to and {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_t and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated_ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associated and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associate and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associat and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associa and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.associ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assoc and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.asso and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.ass and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assi and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assig and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assign and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigne and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigned and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigned_ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigned_t and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigned_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462388988987
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462389814645
$8
workerId
$8
samercha
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2468,570178
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462389077364
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462389959181
$20
time_diff_experiment
$7
1516994
$21
time_start_experiment
$13
1462388390860
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462388418809
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
737281
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1177
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s not in a.assigned_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$17783
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone A
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Ad
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Add
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      si
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      sie
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      si
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      s
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      som
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^ta
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^tar
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^targ
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of &
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & 
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & A
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & Ad
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & Add
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & Addr
    }
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Addr
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
    {
      some (n.^target_of & Addr)
    }
}
*28
$5
HMSET
$8
inszk2d1
$9
timestamp
$13
1462373733662
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$4
6866
$6
postId
$8
inszk2d1
$21
time_start_experiment
$13
1462373723138
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373732608
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$1604
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	ss in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.instructor_of 
}
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373725742
$8
workerId
$1
f
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$9
2418,6865
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1107
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.instructor_of 
}
*10
$5
HMSET
$8
insynp5c
$6
postId
$8
insynp5c
$21
time_start_experiment
$13
1462372213018
$8
workerId
$1
f
$9
timestamp
$13
1462372215081
*52
$5
HMSET
$8
inywhemj
$8
comments
$5
edit 
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462731773008
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462732014784
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inywhemj
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$651
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->some Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3416,218993
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
100623278
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$1300
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->so Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->som Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->some Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462731992001
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462732041704
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
218993
$20
time_diff_experiment
$6
657519
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462731392584
$21
time_start_experiment
$13
1462731357265
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1158
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - enrolled, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4940,347440
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
347441
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$5790
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student , 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student -, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - , 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - e, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - en, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - enro, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - enrol, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - enrolle, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student - enrolled, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462731740025
*52
$5
HMSET
$8
inkiy978
$8
comments
$4
test
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1461862157561
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1461862180050
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inkiy978
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$470
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$9
932,21431
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$5
TEST2
$48
_events_modules/+GOC.html,modules/+AOC.html_+AOC
$167
%,16657,%,16817,%,16982,%,17153,%,17329,%,17511,%,17657,%,17849,',18257,,18480,(,19017,click@run,21435,click@run,21435,click@run,21435,click@run,21435,click@run,21435
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1461862178992
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1461862183710
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$5
21431
$20
time_diff_experiment
$5
77752
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1461862105632
$21
time_start_experiment
$13
1461862102298
$48
_events_modules/+GOC.html,modules/+AOC.html_+GOC
$646
 ,16402, ,16602,¿,16698,¿,16858, ,16994,T,17146,E,17162,S,17306,T,17482,,17562,,18530,,18666,,18810,,18962,,19106,,19242,,19674,¿,21234,¿,21386,T,21682,E,21698,S,21818,T,21986,,22034, ,22082,¿,22482,,22946,,23082,,23250,,23402,,23570,,23738,,23923,,24114,,28738,9,28746,',30386,',30570,',30754,,31082,0,31090,%,31354, ,31586,A,31770,N,31844,D,31954, ,32066,S,33400,N,33538, ,33554,O,33706,T,33818, ,33874,I,33930,N,33989, ,34130,A,34298,¾,34450,A,35050,S,35194,S,35346,I,35394,G,35514,N,35562,E,35634,D,35794,,35826,­,35850,T,36026,O,36050,click@run,38499,click@run,38499,click@run,38499,click@run,38499,click@run,38499
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$790
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.assigned_to) or s in a.associated_with.instructor_of 
}  
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$9
912,38492
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$5
38493
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1461862144125
*10
$5
HMSET
$8
ins5d5j3
$6
postId
$8
ins5d5j3
$21
time_start_experiment
$13
1462323012169
$8
workerId
$5
debug
$9
timestamp
$13
1462323015384
*10
$5
HMSET
$8
insz8ka5
$6
postId
$8
insz8ka5
$21
time_start_experiment
$13
1462373186487
$8
workerId
$1
f
$9
timestamp
$13
1462373189069
*10
$5
HMSET
$8
inkewpuk
$6
postId
$8
inkewpuk
$21
time_start_experiment
$13
1461855312106
$8
workerId
$5
debug
$9
timestamp
$13
1461855315263
*10
$5
HMSET
$8
inkcrn4f
$6
postId
$8
inkcrn4f
$21
time_start_experiment
$13
1461851716058
$8
workerId
$5
debug
$9
timestamp
$13
1461851745244
*10
$5
HMSET
$8
io3in03y
$6
postId
$8
io3in03y
$21
time_start_experiment
$13
1463010434643
$8
workerId
$4
llu3
$9
timestamp
$13
1463010482951
*52
$5
HMSET
$8
inte07zo
$8
comments
$20
Tim, you're the man!
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462398165548
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462398295223
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inte07zo
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$10
3682,79241
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$5
jas14
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462398244789
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462398307080
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$5
79241
$20
time_diff_experiment
$6
303679
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462397995681
$21
time_start_experiment
$13
1462397991544
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1177
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to)
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3404,141859
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
141860
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$20007
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of/0
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of/
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) an
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_n
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to)
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462398137541
*52
$5
HMSET
$8
int3p2c4
$8
comments
$19
Leave feedback here
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462381116964
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462381681844
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
3
$6
postId
$8
int3p2c4
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$616
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (n.^(target_of) & Addr)
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
2992,541106
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
B00770121
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$3242
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: bentry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n:entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (ln.^(b.target_of) & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (n.^(b.target_of) & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (n.^(btarget_of) & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: entry_in | some (n.^(target_of) & Addr)
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462381658070
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462381720678
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
541106
$20
time_diff_experiment
$7
1007003
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462380684183
$21
time_start_experiment
$13
1462380674841
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1892
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
     not assigned_to in associated_with.instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$18
3234,216431,360201
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
360202
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$60046
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
       
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
        
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
         
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
    not s in a.assigned_to     
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for

}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
  
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
   
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
    
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
     not assigned_to in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     not assigned_to in associated_with.assistant_for
     not assigned_to in associated_with.instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  n
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no e
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no en
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enr
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enro
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrol
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enroll
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolle
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled a
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled an
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and as
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and ass
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assi
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assis
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assist
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assista
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistan
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_f
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
    
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
   
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  n
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no e
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no en
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enr
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enro
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrol
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enroll
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolle
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled a
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled an
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and i
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and in
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and ins
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and inst
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instr
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instruc
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instruct
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructo
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_o
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
    
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
   
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled and instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled an&d instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled &d instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled and assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled an assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled a assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled  assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for
  no enrolled & instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462381044385
*10
$5
HMSET
$8
insyyq4p
$6
postId
$8
insyyq4p
$21
time_start_experiment
$13
1462372727507
$8
workerId
$1
d
$9
timestamp
$13
1462372730409
*10
$5
HMSET
$8
inszawlc
$6
postId
$8
inszawlc
$21
time_start_experiment
$13
1462373295754
$8
workerId
$1
d
$9
timestamp
$13
1462373297459
*10
$5
HMSET
$8
inlt45k6
$6
postId
$8
inlt45k6
$21
time_start_experiment
$13
1461939639855
$8
workerId
$5
debug
$9
timestamp
$13
1461939646494
*48
$5
HMSET
$8
io3lt3qc
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463016283537
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$19
time_end_experiment
$13
1463016881728
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
io3lt3qc
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$683
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in = target_of.Target
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3255,549942
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$6
iboros
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$11047
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of,
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.T
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in i target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in  target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in = target_of.Target
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463016833481
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1463016881874
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
549944
$20
time_diff_experiment
$7
1123605
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463015799902
$21
time_start_experiment
$13
1463015758123
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1212
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3687,200704
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
200705
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$135990
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} P
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	n 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_f 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
      
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no i
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no ins
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no inst
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instru
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instruc
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & e
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enc
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

/,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

//,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atle,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ater,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ate,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// al,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alt,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alter,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// altern,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alterna,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternati,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative w,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative wa,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pr,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pre,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred P,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred Po,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading22(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading222(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading22(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in assoc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_wit
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assis
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assist
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assista
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistan
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_fo
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_for
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in aassociated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.-associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.i
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.ins
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.inst
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instr
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instruc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instruct
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructo
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_f
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stdu
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stud
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stude
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.studen
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463016000607
*10
$5
HMSET
$8
intj65vv
$6
postId
$8
intj65vv
$21
time_start_experiment
$13
1462406666832
$8
workerId
$8
sdfsfdsf
$9
timestamp
$13
1462406672731
*52
$5
HMSET
$8
int7x8nf
$8
comments
$1
 
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2239,196938
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
488408
$19
time_end_experiment
$13
1462388980267
$6
postId
$8
int7x8nf
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$25571
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for a or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for an or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s n or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s no or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and  or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     sor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s noor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s notor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not ior s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not inor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.asor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assior s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assignor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigneor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assignedor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_toor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to_or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_toor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to)or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o
      s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o
     s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o
    s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o
     s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
     s not in a.assigned_to) o
    s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
    s not in a.assigned_to) o
    s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
    s not in a.assigned_to) or
    s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
    s not in a.assigned_to) or
    s in a.associated_with.instructor_of
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462388281908
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462388867933
$8
workerId
$7
azhang6
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2602,488407
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462388670994
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462389028287
$20
time_diff_experiment
$7
1205528
$21
time_start_experiment
$13
1462387774739
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462387793500
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
196939
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1183
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and
    s not in a.assigned_to) or
    s in a.associated_with.instructor_of
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$324
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
*10
$5
HMSET
$8
insz374f
$6
postId
$8
insz374f
$21
time_start_experiment
$13
1462372936152
$8
workerId
$1
e
$9
timestamp
$13
1462372938096
*10
$5
HMSET
$8
insza6p4
$6
postId
$8
insza6p4
$21
time_start_experiment
$13
1462373262195
$8
workerId
$1
a
$9
timestamp
$13
1462373264816
*10
$5
HMSET
$8
inlt7wn4
$6
postId
$8
inlt7wn4
$21
time_start_experiment
$13
1461939814918
$8
workerId
$5
debug
$9
timestamp
$13
1461939818540
*10
$5
HMSET
$8
insz9wpt
$6
postId
$8
insz9wpt
$21
time_start_experiment
$13
1462373249260
$8
workerId
$1
d
$9
timestamp
$13
1462373251524
*10
$5
HMSET
$8
insa67hf
$6
postId
$8
insa67hf
$21
time_start_experiment
$13
1462331086189
$8
workerId
$5
debug
$9
timestamp
$13
1462331090823
*10
$5
HMSET
$8
insz1zzb
$6
postId
$8
insz1zzb
$21
time_start_experiment
$13
1462372880240
$8
workerId
$1
d
$9
timestamp
$13
1462372882518
*52
$5
HMSET
$8
io35sbxv
$8
comments
$1
 
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
3162,121884
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$651
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
447283
$19
time_end_experiment
$13
1462989682215
$6
postId
$8
io35sbxv
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$96628
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
f
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fa
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fac
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact 
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact T
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact 
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact s
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact st
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact stu
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact stud
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact stude
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studen
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact student
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact students
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsN
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNo
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNot
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNot 
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNot
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotT
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTA
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
  
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
  
  
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
  
  
  
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
  
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{

  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	f
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	fo
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	fora
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	fora 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	fora
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for a
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for al
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for all
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for all 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for all
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for al
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for a
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	fo
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	f
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	a
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	al
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c :
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : C
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Cl
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Cla
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Clas
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class |
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class |
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class |
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | a
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | al
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s :
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : S
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : St
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Stu
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Stud
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Stude
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Studen
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student s
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student |
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s i
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.e
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.en
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enr
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enro
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrol
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enroll
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolle
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled i
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ip
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ipm
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ipml
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ipmli
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ipml
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ipm
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled ip
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled i
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled im
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled imp
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled impl
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled impli
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implie
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s n
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s no
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not i
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.a
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.as
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.ass
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assi
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assis
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assist
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assista
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistan
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistant
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_f
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_fo
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 	c.assistant_for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 		c.assistant_for
  
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 		c.assistant_for
 
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 		c.assistant_for

}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 		c.assistant_for
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462989298741
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462989582485
$8
workerId
$9
100563900
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
4665,447282
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462989460601
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462989692941
$20
time_diff_experiment
$6
833967
$21
time_start_experiment
$13
1462988848248
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462988851458
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
121884
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1255
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
fact studentsNotTAS{
	all c : Class | all s : Student | s in c.enrolled implies s not in 		c.assistant_for
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$2917
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lon Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lo Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->l Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->  Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> o Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> on Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
*10
$5
HMSET
$8
inszcyet
$6
postId
$8
inszcyet
$21
time_start_experiment
$13
1462373391424
$8
workerId
$1
d
$9
timestamp
$13
1462373393539
*52
$5
HMSET
$8
inure0bl
$8
comments
$372
Pretty straight-forward, similar to examples from Logic For Systems, so that might have given me an advantage. 
Maybe be a little more clear on what should be preserved, for example if you want the sigs to be edited not the assert perhaps do not allow users to edit the assert. It would make things less ambiguous (unless that is the point, in which case disregard this).

$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2249,295013
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
513309
$19
time_end_experiment
$13
1462574713146
$6
postId
$8
inure0bl
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$65771
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {

} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: one Class, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: , 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: s, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: se, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set , 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set S, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set St, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set Stu, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set Stud, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set Stude, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set Studen, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
	associated_with: set Student, 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {
 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person { 
} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person { } 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assign
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in asso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in assoc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associa
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associat
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_w
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_wit
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_fo
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 

	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
      
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
     
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-a, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-as, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-ass, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assi, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assis, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assist, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assista, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistan, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistant, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistant_, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistant_f, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistant_fo, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set Student-assistant_for, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled

}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled

}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462574053727
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462574645091
$8
workerId
$9
100719104
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$25
2943,173133,410702,513308
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
4
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462574350078
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462574880929
$20
time_diff_experiment
$8
93777172
$21
time_start_experiment
$13
1462480935974
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462573540418
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
295013
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$2420
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
    enrolled: set (Student-assistant_for), 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
*28
$5
HMSET
$8
inszj54a
$9
timestamp
$13
1462373710038
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$5
22170
$6
postId
$8
inszj54a
$21
time_start_experiment
$13
1462373680056
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373707541
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$19641
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for aor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for andor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and nor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s ior s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in aor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in aor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.asor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.assor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.assoor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associator s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associateor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associatedor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associatedwor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associatedor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_wor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_witor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_withor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.eor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enror s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enroor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enrolor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enrolleor s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enrolled or s in a.associated_with.instructor_of 
}
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462373685371
$8
workerId
$5
debug
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$10
2477,22169
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1187
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for and not s in a.associated_with.enrolled or s in a.associated_with.instructor_of 
}
*52
$5
HMSET
$8
inukus8w
$8
comments
$395
Especially for my second task, I wasn't entirely sure of the goal of the model. I think It would have helped to preface all the code with a written statement. Something like "you are trying to model an address book, and assert that all names eventually result in an address". For me, its not always easy to look at someone else's code and instantly know whats going on/what they're trying to do.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$32
2366,387755,690476,721382,946044
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1768
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lookup[n]
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
262187
$19
time_end_experiment
$13
1462471617214
$6
postId
$8
inukus8w
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$10520
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{ 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	n 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no  enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462470347991
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462471460046
$8
workerId
$8
kjmyerso
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2731,262186
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462470514002
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462471774989
$20
time_diff_experiment
$7
1655858
$21
time_start_experiment
$13
1462469961356
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
5
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462470085804
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
946044
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1178
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
}{
	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$97776
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
   
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in

},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]/
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//th
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//thi
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this m
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this mak
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this make
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes i
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it ac
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acy
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyc
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acycl
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in/
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//thi
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this ma
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this make
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so th
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so that
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so tha
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so th
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes it
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this makes
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this make
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this mak
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this ma
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this m
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//this
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//thi
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//th
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in//
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in/
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
      
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
      /
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
      //
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
      /
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
      
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
     
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    /
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //th
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //thi
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this on
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one ma
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one make
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes i
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes it 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {//this makes it acyclic
	no n: Name | n in lookup[n]//this makes it acyclic
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  
	no n: Name | n in lookup[n]
      
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
	no n: Name | n in lookup[n]
      //this makes it acyclic
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
	no n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
no n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclicno n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
    //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
   //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
  //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
 //this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
  //this makes it acyclic
  no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
 //this makes it acyclic
  no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
//this makes it acyclic
  no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
  no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
 no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this one makes it so
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this ma
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this make
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this makes
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this makes 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this makes
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this make
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mak
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this ma
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this m
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this ma
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this man
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mand
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandea
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mande
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mand
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this manda
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandat
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates th
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates that
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates that 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]

	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {

	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	n n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	 n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	a n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	al n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] i
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] im
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] impl
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] impli
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n =
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some looki
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookip
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some looki
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] a
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] an
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] and
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] and 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookip
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookip
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] and 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | some lookip
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = lookup[n] 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies n = 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n] implies
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	all n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	 n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandates that 
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mand
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this mandea
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	//this m
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	//this makes it acyclic
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lookup[n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | some lookup[n]
}
*10
$5
HMSET
$8
inunv7xc
$6
postId
$8
inunv7xc
$21
time_start_experiment
$13
1462475020522
$8
workerId
$1
d
$9
timestamp
$13
1462475023429
*10
$5
HMSET
$8
intnl0m6
$6
postId
$8
intnl0m6
$21
time_start_experiment
$13
1462414078362
$8
workerId
$4
test
$9
timestamp
$13
1462414084010
*10
$5
HMSET
$8
inszd1xj
$6
postId
$8
inszd1xj
$21
time_start_experiment
$13
1462373395988
$8
workerId
$1
f
$9
timestamp
$13
1462373400095
*10
$5
HMSET
$8
io3hfycz
$6
postId
$8
io3hfycz
$21
time_start_experiment
$13
1463008426177
$8
workerId
$4
llu3
$9
timestamp
$13
1463008446140
*10
$5
HMSET
$8
innnbkuq
$6
postId
$8
innnbkuq
$21
time_start_experiment
$13
1462050840919
$8
workerId
$3
dan
$9
timestamp
$13
1462050849003
*10
$5
HMSET
$8
inszdb77
$6
postId
$8
inszdb77
$21
time_start_experiment
$13
1462373407997
$8
workerId
$1
f
$9
timestamp
$13
1462373410927
*10
$5
HMSET
$8
io3ijiob
$6
postId
$8
io3ijiob
$21
time_start_experiment
$13
1463010272085
$8
workerId
$4
llu3
$9
timestamp
$13
1463010276244
*10
$5
HMSET
$8
inszgdlv
$6
postId
$8
inszgdlv
$21
time_start_experiment
$13
1462373551088
$8
workerId
$5
dvfdf
$9
timestamp
$13
1462373553040
*52
$5
HMSET
$8
int57xcl
$8
comments
$13
This was fun!
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2557,252332
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$691
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & Addr
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
198036
$19
time_end_experiment
$13
1462383772107
$6
postId
$8
int57xcl
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$32073
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
    
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   d 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   di 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   dis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistan_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistant_f 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   disj enrolled assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   n 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistant_f 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462383456696
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462383750095
$8
workerId
$8
skaramch
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2708,198036
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462383497763
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462383784479
$20
time_diff_experiment
$6
537646
$21
time_start_experiment
$13
1462383234461
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462383258660
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
252332
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
   no enrolled & assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$12525
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some lookup[n] & Addr
}
*10
$5
HMSET
$8
inw0iayi
$6
postId
$8
inw0iayi
$21
time_start_experiment
$13
1462556719102
$8
workerId
$8
parosenb
$9
timestamp
$13
1462556737647
*10
$5
HMSET
$8
insyzdpa
$6
postId
$8
insyzdpa
$21
time_start_experiment
$13
1462372758055
$8
workerId
$1
a
$9
timestamp
$13
1462372760304
*10
$5
HMSET
$8
inszbq9b
$6
postId
$8
inszbq9b
$21
time_start_experiment
$13
1462373334204
$8
workerId
$1
s
$9
timestamp
$13
1462373336467
*10
$5
HMSET
$8
inszd6z9
$6
postId
$8
inszd6z9
$21
time_start_experiment
$13
1462373402529
$8
workerId
$1
d
$9
timestamp
$13
1462373405530
*10
$5
HMSET
$8
int2tdoh
$6
postId
$8
int2tdoh
$21
time_start_experiment
$13
1462379196548
$8
workerId
$7
imdavis
$9
timestamp
$13
1462379200069
*10
$5
HMSET
$8
inruz2b8
$6
postId
$8
inruz2b8
$21
time_start_experiment
$13
1462305558653
$8
workerId
$5
debug
$9
timestamp
$13
1462305562206
*52
$5
HMSET
$8
inz3qabf
$8
comments
$19
Leave feedback here
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462743936183
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462744444854
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inz3qabf
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3001,444273
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$6
zlowry
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$324
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462744380457
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462744451472
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
444274
$20
time_diff_experiment
$6
915956
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462743546877
$21
time_start_experiment
$13
1462743528898
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1198
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to & associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3301,340871
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
340872
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$37472
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in assoc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associt
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associat
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_fo
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     noassigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to not in associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to not i associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to not  associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to not associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to no associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to n associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to  associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to  associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled
     no assigned_to & associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462743887749
*48
$5
HMSET
$8
inuju60s
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$10
2777,92377
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$719
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr)
}
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
171790
$19
time_end_experiment
$13
1462468620395
$6
postId
$8
inuju60s
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$60455
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}


pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}



pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fa

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fac

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  
  

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
 	 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact { 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  al
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s:
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: P
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Per
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Pers
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Perso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person |
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;;
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;; 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;; a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;; a:
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a;; a: 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | al
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a:
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: A
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: As
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assign
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignme
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment |
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | P
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Po
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Pol
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Poli
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Policy
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Policy 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | Policy
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyA
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAl
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAll
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllow
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllows
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsG
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGra
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrad
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGradi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s,
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a]
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] im
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] imp
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] impl
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implie
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assign
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462468462733
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462468599131
$8
workerId
$8
fgoodman
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3957,171789
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462468506753
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462468620652
$20
time_diff_experiment
$6
367466
$21
time_start_experiment
$13
1462468252929
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462468290943
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$5
92378
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1252
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

fact {
  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$22141
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  
  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact { 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: B
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Bo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Boo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b,
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] *
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] * 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] *
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact {
  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr)
}
*10
$5
HMSET
$8
inszasum
$6
postId
$8
inszasum
$21
time_start_experiment
$13
1462373290906
$8
workerId
$1
d
$9
timestamp
$13
1462373293674
*10
$5
HMSET
$8
inm2akl8
$6
postId
$8
inm2akl8
$21
time_start_experiment
$13
1461955055810
$8
workerId
$8
testtest
$9
timestamp
$13
1461955058971
*10
$5
HMSET
$8
intj5iqb
$6
postId
$8
intj5iqb
$21
time_start_experiment
$13
1462406636829
$8
workerId
$12
afsgasdfasdf
$9
timestamp
$13
1462406643378
*10
$5
HMSET
$8
inm67a6m
$6
postId
$8
inm67a6m
$21
time_start_experiment
$13
1461961620823
$8
workerId
$5
debug
$9
timestamp
$13
1461961624064
*10
$5
HMSET
$8
into8xux
$6
postId
$8
into8xux
$21
time_start_experiment
$13
1462415194479
$8
workerId
$8
cstanfor
$9
timestamp
$13
1462415199338
*52
$5
HMSET
$8
intmgii5
$8
comments
$474
(no idea whether this comment is in scope, but:) The visualizer is my least favorite thing about Alloy. My top complaint about it is the way it "attaches" things on the same horizontal level to one another, preventing you from dragging individual nodes around separately. This is particularly painful when coupled with the apparently arbitrary way in which it splits atoms into horizontal levels.

Thanks for fighting the good fight for software quality by working on tools.
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462412652836
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462413951649
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
intmgii5
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$1955
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

lone sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some a: Addr | a in n.(^target_of)
}

$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$35
3092,731166,1048913,1152342,1215624
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$5
peter
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$85331
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name <
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name <:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name <
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | somea
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarhg
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarhge
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarhget
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarhge
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarhg
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tarh
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^targeg
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target_f
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<:target_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name<target_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nametarget_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name target_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name &target_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of. | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.u | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.uni | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

lsig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

lonsig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

lonesig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

lone sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

 sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

f,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fac,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact a,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact al,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact all,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact al,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact a,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact com,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact comp,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact com,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact c,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact cov,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact cover,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact covera,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverag,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverage,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageO,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOf,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfN,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNam,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfName,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  a
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  al
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n:
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: N
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: Nam
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: Name
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: Nam
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: Na
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: N
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n: 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n:
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all n
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  all
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  al
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  a
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {

}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
  
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
   
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    N
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Nam
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name i
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in 
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in B
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Bo
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Boo
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.e
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.en
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.ent
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entr
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
      
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
     
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
    
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
   
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
  
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
 
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)

}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: e | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: ent | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entr | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_ | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some a: Addr | a in n.(^target_of)
}

fact coverageOfNames {
    Name in Book.entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some a: Addr | a in n.(^target_of)
}

,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some a: Addr | a in n.(^target_of)
}

$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462413868461
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462414137387
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$7
1215625
$20
time_diff_experiment
$7
1763054
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462412238104
$21
time_start_experiment
$13
1462412188595
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1137
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3235,211500
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
211501
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
5
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$12239
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	denrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	dienrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disenrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disjenrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled,: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, : set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, a: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, as: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, ass: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assi: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assis: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assist: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistan: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_f: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_fo: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462412449605
*52
$5
HMSET
$8
intogpau
$8
comments
$11
No comments
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462416590715
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462417092240
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
intogpau
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
2987,383823
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$8
cstanfor
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$975
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462416974540
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462417110711
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
383825
$20
time_diff_experiment
$7
1535605
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462415561256
$21
time_start_experiment
$13
1462415556635
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1178
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3060,946533
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
946535
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$14155
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - asso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - assoc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associat
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462416507791
*52
$5
HMSET
$8
int1a40o
$8
comments
$28
Leave feedgfsdfsdfdback here
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462376683318
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462376695993
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
4
$6
postId
$8
int1a40o
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$10
2987,11285
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$4
test
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$324
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462376694604
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462376704999
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$5
11286
$20
time_diff_experiment
$5
78044
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462376619819
$21
time_start_experiment
$13
1462376617949
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$2334
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: set Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$22
2962,10925,25314,60718
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$5
60718
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$26485
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: on Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: o Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with:  Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: s Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: set Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: se Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: s Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with:  Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: n Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with:  Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: on Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	nenrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	noenrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistant_fo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462376680537
*10
$5
HMSET
$8
inszggp9
$6
postId
$8
inszggp9
$21
time_start_experiment
$13
1462373555095
$8
workerId
$1
s
$9
timestamp
$13
1462373556925
*10
$5
HMSET
$8
inkf960l
$6
postId
$8
inkf960l
$21
time_start_experiment
$13
1461855892923
$8
workerId
$5
TEST2
$9
timestamp
$13
1461855905653
*10
$5
HMSET
$8
inszeouz
$6
postId
$8
inszeouz
$21
time_start_experiment
$13
1462373472360
$8
workerId
$3
deb
$9
timestamp
$13
1462373475892
*52
$5
HMSET
$8
inwirzhe
$8
comments
$955
I like the visualizer a lot, so thanks for all you've done for it. There are a few changes I would really like to see made:
1. When two sig instances have many arrows between each other, they are put so close together that one cannot even mouse over the inner ones. I know it would be ugly if they were spread widely and had 6 arrows, but if the default could just be like 1.5 or 2 times as far between each (like 5 mm instead of 3) this would be quite helpful.
2. I frequently want to visualize relations other than the exact ones I have defined in the sigs, e.g., there is a relation from a large object to a relation between two sets of small objects, but I only want to visualize the relation between the small objects. If I could add a new relation to the visualizer, like how I type it into the Evaluator, this would be extremely helpful for clarity.
3. The Theme GUI is helpful enough that I wish it came up automatically upon generating the model.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$18
2450,524594,955293
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1053
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target | t in lookup[n] implies t in entry_in
    target_of.Target = entry_in
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
433059
$19
time_end_experiment
$13
1462593198888
$6
postId
$8
inwirzhe
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$40500
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {assigned_to in associated_with.enrolled 
}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {assigned_to in associated_with.enrolled }
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {assigned_to in associated_with.enrolled}
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
 s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
 s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
     
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
    
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
   
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s in
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not i
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	dienrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	dijenrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	dienrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disenrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disjenrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled,: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, : set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, : set Student, 
	: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and
  s not in a.assigned_to
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462592003326
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462593015969
$8
workerId
$9
100516010
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2565,433058
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462592060676
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462593549518
$20
time_diff_experiment
$7
5795008
$21
time_start_experiment
$13
1462587403880
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
3
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462591570267
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
955293
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1136
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	disj enrolled, assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) {
  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$59325
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ntarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some etarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some enttarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entrytarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_itarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_intarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in:target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: enttarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entrtarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entrytarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entry_target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entry_itarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entry_intarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in: entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in  entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in | entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in  entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_intarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    nsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^bsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^tsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^tarsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^targsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^targetsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_osome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_ofsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_of)some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_ofsome entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_of some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_of  some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_of some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    j
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no 
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no e
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no ent
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entr
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entryi
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_i
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.t
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.tar
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.targ
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.target
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.target_
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.target_o
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    no entry_in.target_of
      n.^target_of 
      some entry_in.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in.T
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in.Tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in.Targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    T.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    .Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    t.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    tar.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    targ.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name,  | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l: | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l:  | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l: T | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l:  | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l: | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, l | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name,  | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t:  | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: T | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Tar | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Targ | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target | l in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target |  in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target | t in lookup[n] implies l in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target | t in lookup[n] implies  in entry_in
    target_of.Target = entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n: Name, t: Target | t in lookup[n] implies t in entry_in
    target_of.Target = entry_in
}
*10
$5
HMSET
$8
inrx6rjo
$6
postId
$8
inrx6rjo
$21
time_start_experiment
$13
1462309277180
$8
workerId
$5
debug
$9
timestamp
$13
1462316403234
*10
$5
HMSET
$8
inm6c7e0
$6
postId
$8
inm6c7e0
$21
time_start_experiment
$13
1461961850481
$8
workerId
$5
debug
$9
timestamp
$13
1461961854045
*10
$5
HMSET
$8
insz2f2o
$6
postId
$8
insz2f2o
$21
time_start_experiment
$13
1462372899801
$8
workerId
$1
f
$9
timestamp
$13
1462372902269
*52
$5
HMSET
$8
intg18nv
$8
comments
$234
It was't quite clear what would be considered "overmodification" of the specification: particularly in the second problem, it seemed possible to make the assertion true by essentially ruining the intended meaning of the specification.
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462401617239
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462402128353
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
intg18nv
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$996
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$18
3091,330557,410021
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$4
ajl4
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$9609
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in ^lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in n.^(b.target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in n.^(btarget_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->o Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->on Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in n.^(target_of)
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in l
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lo
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in loo
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in look
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in looku
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462402027261
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462402266627
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
410022
$20
time_diff_experiment
$6
730043
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462401448844
$21
time_start_experiment
$13
1462401398310
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1179
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3745,111365
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
111366
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
3
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$32815
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
f
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
fa
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
fac
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
fac=
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
fac
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
fa
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
f
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
    
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled -
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - asso
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - assoc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associ
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associa
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associat
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associate
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_w
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_wi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_wit
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.a
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assist
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistan
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_fo
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled - associated_with.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462401560210
*10
$5
HMSET
$8
inrv19gn
$6
postId
$8
inrv19gn
$21
time_start_experiment
$13
1462305661235
$8
workerId
$5
debug
$9
timestamp
$13
1462305663512
*52
$5
HMSET
$8
io3js0s4
$8
comments
$418
I have opened and attempted the survey several times because it does not keep session and cannot undo submit.. so I wish everything was recorded correctly. I do find these two questions confusing, like I need to assert something that is not constrained originally in the problem, but with unconventional ways, like the first one, i don't really have a hint about what to do except include the constraint in the assert.
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$10
2761,39625
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$718
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies some n.target_of & Target
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$5
23771
$19
time_end_experiment
$13
1463012484058
$6
postId
$8
io3js0s4
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$1188
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463012378820
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463012466987
$8
workerId
$4
llu3
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$10
2574,23771
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463012427362
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1463012623586
$20
time_diff_experiment
$6
135647
$21
time_start_experiment
$13
1463012348411
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463012355049
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$5
39625
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1188
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$23500
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name +
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in im
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in imp
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in impl
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in impli
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implie
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & T
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & Tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & Targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & Targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies sn.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies son.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies soon.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies soomn.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies soon.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies son.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies somen.target_of & Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies some n.target_of & Target
}
*52
$5
HMSET
$8
intmey75
$8
comments
$1
 
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462413202861
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462414015203
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
intmey75
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$734
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddr {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
2782,549367
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
100647253
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$11910
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

assert lookupYields {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa lookupYields {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac lookupYields {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact lookupYields {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact n {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact na {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nam {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact name {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameL {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLe {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLead {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeads {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadst {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeads {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsT {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsTo {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToA {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAd {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAdd {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddre {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddres {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddress {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddres {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddre {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddr {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAdd {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact nameLeadsToAddr {
	all b: Book, n: b.entry_in | some (lookup [b,n] & Addr)
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462413752230
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462414399334
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
549369
$20
time_diff_experiment
$7
1899578
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462412137635
$21
time_start_experiment
$13
1462412115625
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1181
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3703,691244
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
691245
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$19560
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no en
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enroll
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_fo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462412828880
*10
$5
HMSET
$8
ins8i984
$6
postId
$8
ins8i984
$21
time_start_experiment
$13
1462328289087
$8
workerId
$5
debug
$9
timestamp
$13
1462328312136
*10
$5
HMSET
$8
inkd06gx
$6
postId
$8
inkd06gx
$21
time_start_experiment
$13
1461852114378
$8
workerId
$5
debug
$9
timestamp
$13
1461852118515
*52
$5
HMSET
$8
inkdopla
$8
comments
$116
This is Tim's test on Thursday the 28th. I made edits and erased them, backtracked etc. to test keystroke capture...
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1461853590052
$46
_keys_modules/+GOC.html,modules/+AOC.html_+AOC
$211
...$&¿¿ OK¼ HTIS TEXTL OOKS SMALL ENOUGH FOR ME OT YUSESE¾$'''INTERNAL THOUGHT PROCESS; Þ#ÞSCENAIRO (((((((''('''''''''''%. ¿¿ REQUIRE SOMEHTING OT MAP TO¼ ALTHOUGH I QUESTION THE PROPERTY1
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1461853692037
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
inkdopla
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$625
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},// Internal thought process: "Ok, this scenario text looks small enough for me to use."

abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target // Require something to map to, although I question the property!
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$10
925,100263
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$4
TEST
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1461853690316
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1461853744089
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
100264
$20
time_diff_experiment
$6
433136
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1461853326986
$21
time_start_experiment
$13
1461853258901
$46
_keys_modules/+GOC.html,modules/+AOC.html_+GOC
$384
...	¿¿ HELLO I AM MAKING A CHANGE NOT MAKING A CHANGE ¾¾¾ &&&#$&¿¿ ASSUMING HTIS IS NOT A MINIMAL COUNTEREXAMPLE1((&&¿¿ I FINDM YSELF DRAWN AWAY AND WANT TO FIX JSUT BY LOOKING AT THE SPEC¾(((((%%((((((((('%0%%%%9'''' ­ A¾ASSOCIATED	 '''%%..&&&('''''.%%%%%Û#  Ý&#ANDS NOT IN A¾ASSOCIATE­D­WITH¾&''&&''''#.((%%#ASSIGNED­TO
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$935
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},// Assuming this is NOT a minimal counterexample!
// I find myself drawn away and want to fix just by looking at the spec.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
  {s in a.associated_with.assistant_for 
    and
   s not in a.assigned_to
  }
       or 
    s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
1182,259991
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
259991
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1461853586977
*10
$5
HMSET
$8
insza1ds
$6
postId
$8
insza1ds
$21
time_start_experiment
$13
1462373255306
$8
workerId
$2
dd
$9
timestamp
$13
1462373258206
*10
$5
HMSET
$8
int2sw1y
$6
postId
$8
int2sw1y
$21
time_start_experiment
$13
1462379173706
$8
workerId
$7
imdavis
$9
timestamp
$13
1462379188619
*48
$5
HMSET
$8
inltbiqz
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$8
927,6579
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$471
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->some Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$5
11248
$19
time_end_experiment
$13
1461940011960
$6
postId
$8
inltbiqz
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1461939999804
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1461940010441
$48
_events_modules/+GOM.html,modules/+AOM.html_+GOM
$146
,9430,click@run,11252,click@run,11252,click@run,11252,click@run,11252,click@run,11252,click@comment,13296,click@comment,13296,click@comment,13296
$8
workerId
$5
debug
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$9
805,11247
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1461940003862
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1461940011987
$20
time_diff_experiment
$5
28422
$21
time_start_experiment
$13
1461939983538
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1461939988556
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$4
6579
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$719
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} 

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.instructor_of 
}
$48
_events_modules/+GOM.html,modules/+AOM.html_+AOM
$173
O,3944,,4394,S,4499,O,4564,M,4796,E,4796,click@run,6582,click@run,6582,click@run,6582,click@run,6582,click@run,6582,click@comment,7556,click@comment,7556,click@comment,7556
*52
$5
HMSET
$8
io24j4ka
$8
comments
$1
 
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462926941566
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$8
finished
$4
true
$19
time_end_experiment
$13
1462927667080
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$6
postId
$8
io24j4ka
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3594,373779
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$8
workerId
$9
B00769728
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$7650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    	all n : Name | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : Name | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : e | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : en | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : ent | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entr | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry- | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_ | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | n in entry_in implies n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in |  n in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | n in target_of.Target
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1462927315346
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$9
timestamp
$13
1462927678943
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
373780
$20
time_diff_experiment
$7
1394089
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462926342307
$21
time_start_experiment
$13
1462926272991
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1179
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4620,471470
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
471471
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$1179
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462926813778
*10
$5
HMSET
$8
insxzu95
$6
postId
$8
insxzu95
$21
time_start_experiment
$13
1462371099891
$8
workerId
$1
d
$9
timestamp
$13
1462371103757
*10
$5
HMSET
$8
insz72y3
$6
postId
$8
insz72y3
$21
time_start_experiment
$13
1462373117366
$8
workerId
$1
d
$9
timestamp
$13
1462373120941
*52
$5
HMSET
$8
int4c632
$8
comments
$5
sweet
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$25
2962,735847,869071,910237
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$2069
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & Addr
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
}
$8
finished
$4
true
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
386497
$19
time_end_experiment
$13
1462384410560
$6
postId
$8
int4c632
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$20537
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  AND
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  AND 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  AND
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  AN
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  A
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  and
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )
  an
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {

}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no en
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assiste
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462383348118
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462384351034
$8
workerId
$8
jllessin
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3278,386496
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1462383440797
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$9
timestamp
$13
1462384416089
$20
time_diff_experiment
$7
2657772
$21
time_start_experiment
$13
1462381752788
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
4
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1462382961621
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
910237
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1179
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$117127
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pr,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pre,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred n,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred name,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameY,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYie,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYiel,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYield,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b :,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : B,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Bo,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book,,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n :,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : N,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Nam,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {

},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYiels (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYies (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYis (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYs (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred names (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameRs (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameRess (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameResos (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameResols (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameResolvs (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}


pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}



pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pre

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred n

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred na

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nam

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred name

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameY

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYie

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYiel

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYield

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b :

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : B

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Bo

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n :

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : N

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Nam

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name0 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name0 {

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name0 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name0

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) 

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
  

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {

}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	na
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nam
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	name
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameR
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameRes
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameReso
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolv
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b,
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] o
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or som
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n'
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 :
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : N
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Nam
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name |
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name | 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name |
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	|
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 i
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.ta
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.tar
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.targ
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.target
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.target_
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in b.target_of
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in nb.target_of
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.b.target_of
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of)
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) an
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and n
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nam
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and name
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameY
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYie
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYiel
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYield
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields(
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b,
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, 
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     al
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     all 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     a
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n :
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : en
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : ent
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in |
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | na
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | name
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameY
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYie
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYiel
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYield
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [th
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [thi
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [this
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [this, 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [this, n
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n : entry_in | nameYields [this, n]
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    -all n : entry_in | nameYields [this, n]
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
      
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     al
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n :
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : en
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : ent
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in |
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | so
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some l
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lo
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some loo
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some look
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [th
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this,
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n]
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & 
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & A
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & Ad
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & Add
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    --all n : entry_in | nameYields [this, n]
     all n : entry_in | some lookup [this, n] & Addr
}

pred nameYields (b : Book, n : Name) {
	nameResolves [b, n] or some n2 : Name 
      	| n2 in n.(b.target_of) and nameYields [b, n2]
}

pred nameResolves (b : Book, n : Name) {
	some b.target_of.n & Addr
}
*10
$5
HMSET
$8
inkcrim6
$6
postId
$8
inkcrim6
$21
time_start_experiment
$13
1461851710218
$8
workerId
$5
debug
$9
timestamp
$13
1461851713060
*2
$6
SELECT
$1
0
*52
$5
hmset
$8
io3lt3qc
$6
postId
$8
io3lt3qc
$21
time_start_experiment
$13
1463015758123
$8
workerId
$6
iboros
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463015799902
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
3687,200704
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1212
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$135990
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} P
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	n 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ass 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_f 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
      
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
     
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no i
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no ins
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no inst
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instru
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instruc
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructo
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & e
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enc
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enr
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enro
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrol
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolle
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
    no instructor_of & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

/,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

//,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atle,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ater,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// ate,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// al,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alt,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alter,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// altern,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alterna,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternati,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative w,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative wa,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pr,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pre,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred P,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred Po,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading22(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading222(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading22(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in assoc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_wit
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assis
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assist
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assista
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistan
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_fo
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_for
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in aassociated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.-associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.i
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.ins
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.inst
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instr
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instruc
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instruct
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructo
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_f
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for  
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.as
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.asso
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associ
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associat
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associate
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_wi
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.s
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stdu
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stud
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stude
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.studen
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no assistant_for & enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}

// alternative way
pred PolicyAllowsGrading2(s: Person, a: Assignment) {
  	s in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463016000607
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
200705
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463016283537
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3255,549942
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$683
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in = target_of.Target
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$11047
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in i
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of,
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.T
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in in target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in i target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in  target_of.Target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    entry_in = target_of.Target
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463016833481
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
549944
$19
time_end_experiment
$13
1463016881728
$20
time_diff_experiment
$7
1123605
$8
comments
$459
I think these models were too simple to say anything much that's meaningful. Normally when I'm debugging alloy specs, I can't just look at a counter example and see what the problem is. I have to try stuff in the evaluator, comment stuff out, and add new, temporary constraints. With these examples I just looked at the spec and counter example and was able to figure it out the issue pretty quickly (which I guess is ideal), but this is not the "usual" case.
$8
finished
$4
true
$9
timestamp
$13
1463017002338
*44
$5
hmset
$8
io2317uh
$6
postId
$8
io2317uh
$21
time_start_experiment
$13
1462923757822
$8
workerId
$9
100705901
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462923800798
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$13
4641,84563646
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1196
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$29240
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 al 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: ent 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463008364444
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$8
84563646
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463008411074
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
8
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$67
4123,15068529,15633915,15967141,16032705,16068205,16154360,16244001
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$2744
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$83329
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies sl in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies soml in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tain entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tarin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_oin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_ofin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of ry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of y_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of _in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tag
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
   
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soome
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n im
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n impl
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implie
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | a
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | al
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b:
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: B
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Bo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Boo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(btarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some btarget_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      	
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      l
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      le
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 =
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.t
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.ta
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.tar
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.targ
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_o
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^() & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^ & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = t.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = thi.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = this.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in

},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l nin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l noin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l notin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all dn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all din,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disjn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463024655075
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
FAIL
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$8
16244001
$9
timestamp
$13
1463024656315
*48
$5
hmset
$8
io2317uh
$6
postId
$8
io2317uh
$21
time_start_experiment
$13
1462923757822
$8
workerId
$9
100705901
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462923800798
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$13
4641,84563646
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1196
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$29240
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 al 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: ent 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463008364444
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$8
84563646
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463008411074
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
8
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$67
4123,15068529,15633915,15967141,16032705,16068205,16154360,16244001
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$2744
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$83329
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies sl in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies soml in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tain entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tarin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_oin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_ofin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of ry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of y_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of _in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tag
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
   
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soome
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n im
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n impl
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implie
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | a
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | al
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b:
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: B
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Bo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Boo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(btarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some btarget_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      	
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      l
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      le
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 =
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.t
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.ta
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.tar
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.targ
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_o
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^() & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^ & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = t.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = thi.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = this.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in

},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l nin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l noin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l notin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all dn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all din,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disjn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463024655075
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
FAIL
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$8
16244001
$19
time_end_experiment
$13
1463024661832
$20
time_diff_experiment
$9
100904010
$9
timestamp
$13
1463024656348
*52
$5
hmset
$8
io2317uh
$6
postId
$8
io2317uh
$21
time_start_experiment
$13
1462923757822
$8
workerId
$9
100705901
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1462923800798
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$13
4641,84563646
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1196
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$29240
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 a 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 al 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s:  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: e 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: ent 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolle 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled | 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s n
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in a
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in as
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in ass
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assi
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assis
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assist
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assista
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistan
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_f
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 all s: enrolled |
   	s not in assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463008364444
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$8
84563646
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463008411074
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
8
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$67
4123,15068529,15633915,15967141,16032705,16068205,16154360,16244001
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$2744
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$83329
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies sl in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies soml in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tain entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.tarin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_oin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_ofin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of ry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of y_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of _in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.target_of in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.targetsin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.^in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l.in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies somel in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tag
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
   
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
  
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soome
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soom
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      soo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n im
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n impl
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implie
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^ta
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | a
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | al
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b:
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: B
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Bo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Boo
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book 
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(btarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some btarget_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of.n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of)
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      	
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      l
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      le
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 =
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.t
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.ta
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.tar
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.targ
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_o
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of 
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.target_of).n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some (b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^(b.target_of) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^() & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^) & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^ & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | all b: Book |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name | 
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = b.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = t.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = thi.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = this.target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
 	all n: Name |
      let b1 = target_of |
      	some b1.n implies some n.^b1 & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in

},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l nin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l noin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l notin entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l not in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some loo
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some look
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some looku
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l]
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all dn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all din,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disjn,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies some lookup[l] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463024655075
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
FAIL
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$8
16244001
$19
time_end_experiment
$13
1463024661832
$20
time_diff_experiment
$9
100904010
$8
comments
$53
I unfortunately could not understand the second model
$8
finished
$4
true
$9
timestamp
$13
1463024693653
*10
$5
hmset
$8
io4e1o7d
$6
postId
$8
io4e1o7d
$21
time_start_experiment
$13
1463063187149
$8
workerId
$9
100605856
$9
timestamp
$13
1463063248799
*28
$5
hmset
$8
io4e1o7d
$6
postId
$8
io4e1o7d
$21
time_start_experiment
$13
1463063187149
$8
workerId
$9
100605856
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063248598
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
4308,568747
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1201
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$25934
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for +  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + ins 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instru 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instruc 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_o 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of)  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrole 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063817345
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
568747
$9
timestamp
$13
1463063898406
*44
$5
hmset
$8
io4e1o7d
$6
postId
$8
io4e1o7d
$21
time_start_experiment
$13
1463063187149
$8
workerId
$9
100605856
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063248598
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
4308,568747
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1201
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$25934
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for +  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + ins 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instru 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instruc 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_o 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of)  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrole 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063817345
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
568747
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463063901218
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2641,866418
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$694
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$14270
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463064767637
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
866419
$9
timestamp
$13
1463064875555
*48
$5
hmset
$8
io4e1o7d
$6
postId
$8
io4e1o7d
$21
time_start_experiment
$13
1463063187149
$8
workerId
$9
100605856
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063248598
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
4308,568747
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1201
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$25934
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for +  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + ins 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instru 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instruc 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_o 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of)  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrole 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063817345
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
568747
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463063901218
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2641,866418
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$694
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$14270
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463064767637
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
866419
$19
time_end_experiment
$13
1463064875236
$20
time_diff_experiment
$7
1688087
$9
timestamp
$13
1463064875576
*52
$5
hmset
$8
io4e1o7d
$6
postId
$8
io4e1o7d
$21
time_start_experiment
$13
1463063187149
$8
workerId
$9
100605856
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063248598
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
4308,568747
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1201
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$25934
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (as 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assi 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assis 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assist 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assista 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistan 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_fo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for +  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + in 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + ins 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instru 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instruc 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructo 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_ 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_o 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of)  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) &  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & ( 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (en 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enr 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enro 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrole 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrol 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enroll 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 	no (assistant_for + instructor_of) & (enrolled) 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463063817345
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
568747
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463063901218
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$11
2641,866418
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$694
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$14270
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      	
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some.^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some .^target_of & Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some n.^target_of & Addr
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463064767637
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
866419
$19
time_end_experiment
$13
1463064875236
$20
time_diff_experiment
$7
1688087
$8
comments
$716
I really enjoyed this class and sort of wished that I had the kind of background that it gave me before I took the intro-sequence here. I feel like it's possible to go through a programming course that introduces you to various fundamental data-structures and algorithms with little to no appreciation for how to check invariants of the systems you design or how to reason rigorously about counterexamples/edges cases that a flawed implementation is susceptible to. Given that there isn't much background required to follow the material, I would support a move for this to become a prerequisite for many more courses in the department than it currently serves as a prereq for (if any -- though I didn't check this). 
$8
finished
$4
true
$9
timestamp
$13
1463065141559
*10
$5
hmset
$8
io4bns3n
$6
postId
$8
io4bns3n
$21
time_start_experiment
$13
1463059179786
$8
workerId
$6
kartik
$9
timestamp
$13
1463065543853
*10
$5
hmset
$8
io4jdv0c
$6
postId
$8
io4jdv0c
$21
time_start_experiment
$13
1463072153924
$8
workerId
$7
imdavis
$9
timestamp
$13
1463072206828
*28
$5
hmset
$8
io4jdv0c
$6
postId
$8
io4jdv0c
$21
time_start_experiment
$13
1463072153924
$8
workerId
$7
imdavis
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072206974
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3063,152060
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$24878
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	n  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no e  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no en  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enr  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrol  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolle  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & a  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & as  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assi  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assis  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assista  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistan  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.f  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistantfor  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072359036
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
152062
$9
timestamp
$13
1463072472744
*44
$5
hmset
$8
io4jdv0c
$6
postId
$8
io4jdv0c
$21
time_start_experiment
$13
1463072153924
$8
workerId
$7
imdavis
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072206974
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3063,152060
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$24878
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	n  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no e  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no en  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enr  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrol  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolle  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & a  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & as  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assi  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assis  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assista  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistan  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.f  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistantfor  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072359036
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
152062
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072475986
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
4
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$25
3272,267267,339500,422375
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1349
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$21480
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: T | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tarh | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Targ | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: N | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Nam | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072898362
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
422376
$9
timestamp
$13
1463073531420
*48
$5
hmset
$8
io4jdv0c
$6
postId
$8
io4jdv0c
$21
time_start_experiment
$13
1463072153924
$8
workerId
$7
imdavis
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072206974
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3063,152060
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$24878
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	n  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no e  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no en  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enr  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrol  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolle  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & a  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & as  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assi  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assis  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assista  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistan  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.f  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistantfor  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072359036
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
152062
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072475986
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
4
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$25
3272,267267,339500,422375
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1349
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$21480
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: T | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tarh | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Targ | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: N | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Nam | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072898362
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
422376
$19
time_end_experiment
$13
1463073531336
$20
time_diff_experiment
$7
1377412
$9
timestamp
$13
1463073531427
*52
$5
hmset
$8
io4jdv0c
$6
postId
$8
io4jdv0c
$21
time_start_experiment
$13
1463072153924
$8
workerId
$7
imdavis
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072206974
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
3063,152060
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$24878
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	n  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no e  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no en  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enr  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrooled  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroole  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrool  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enroo  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enro  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrol  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolle  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled &   
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & a  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & as  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assi  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assis  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assista  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistan  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.f  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant.for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistantfor  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
	no enrolled & assistant_for  
}

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463072359036
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
152062
$47
_start_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072475986
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+AOM
$1
4
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM
$25
3272,267267,339500,422375
$47
_specs_modules/+GOM.html,modules/+AOM.html_+AOM
$1349
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+AOM
$21480
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: T | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tarh | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Tar | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Targ | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    som
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr &
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & en
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & ent
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entr
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Target | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: N | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Nam | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.targe
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_o
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some Addr & entry_in
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+AOM
$13
1463072898362
$48
_result_modules/+GOM.html,modules/+AOM.html_+AOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+AOM
$6
422376
$19
time_end_experiment
$13
1463073531336
$20
time_diff_experiment
$7
1377412
$8
comments
$196
I wish I could retry running the model with new changes after I made the assertion correct.

These instances also seemed very simplistic - I'm not exactly sure what the purpose of this survey was.
$8
finished
$4
true
$9
timestamp
$13
1463073617153
*10
$5
hmset
$8
io4uugqp
$6
postId
$8
io4uugqp
$21
time_start_experiment
$13
1463091404360
$8
workerId
$8
jwatson1
$9
timestamp
$13
1463091426844
*28
$5
hmset
$8
io4uugqp
$6
postId
$8
io4uugqp
$21
time_start_experiment
$13
1463091404360
$8
workerId
$8
jwatson1
$12
experimentID
$35
modules/+GOM.html,modules/+AOM.html
$47
_start_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463091426958
$48
_clicks_modules/+GOM.html,modules/+AOM.html_+GOM
$1
2
$51
_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM
$11
2505,123605
$47
_specs_modules/+GOM.html,modules/+AOM.html_+GOM
$1183
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOM.html,modules/+AOM.html_+GOM
$16609
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  

sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no  
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no e 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no en 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enro 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrol 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolle 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled  
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled &  
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & as 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & ass 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assi 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assis 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assist 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistan 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_ 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_fo 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
 no enrolled & assistant_for 
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOM.html,modules/+AOM.html_+GOM
$13
1463091550564
$48
_result_modules/+GOM.html,modules/+AOM.html_+GOM
$4
PASS
$46
_time_modules/+GOM.html,modules/+AOM.html_+GOM
$6
123606
$9
timestamp
$13
1463094149449
*10
$5
hmset
$8
io52ystm
$6
postId
$8
io52ystm
$21
time_start_experiment
$13
1463105043566
$8
workerId
$8
parosenb
$9
timestamp
$13
1463105058605
*28
$5
hmset
$8
io52ystm
$6
postId
$8
io52ystm
$21
time_start_experiment
$13
1463105043566
$8
workerId
$8
parosenb
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105058608
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
4
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$25
3444,505956,615688,818595
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$2383
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$88645
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}te

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 te	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	as: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	ass: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assi: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assign: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigne: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in u
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in ins
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instr
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instru
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruct
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 e 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 en 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enr 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enro 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrol 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enroll 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolle 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in as 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in ass 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assis 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assista 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistan 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_ 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_f 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_for 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no e
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no en
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enr
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enro
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrol
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enroll
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolle
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled &
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & as
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & ass
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assi
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assis
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assista
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistan
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_f
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_fo
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105877203
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
818595
$9
timestamp
$13
1463105986190
*44
$5
hmset
$8
io52ystm
$6
postId
$8
io52ystm
$21
time_start_experiment
$13
1463105043566
$8
workerId
$8
parosenb
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105058608
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
4
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$25
3444,505956,615688,818595
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$2383
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$88645
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}te

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 te	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	as: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	ass: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assi: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assign: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigne: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in u
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in ins
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instr
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instru
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruct
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 e 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 en 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enr 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enro 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrol 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enroll 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolle 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in as 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in ass 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assis 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assista 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistan 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_ 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_f 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_for 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no e
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no en
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enr
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enro
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrol
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enroll
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolle
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled &
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & as
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & ass
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assi
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assis
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assista
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistan
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_f
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_fo
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105877203
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
818595
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463105986296
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
5
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$32
3298,254689,706102,883622,900679
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$1704
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$21841
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onsig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onesig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

f,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some l
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some loo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some look
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some looku
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some nlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n:lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: elookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: enlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrylookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_i lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in |lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & A
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Ad
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Add
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | solookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | somlookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463106886975
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
900679
$9
timestamp
$13
1463106930222
*48
$5
hmset
$8
io52ystm
$6
postId
$8
io52ystm
$21
time_start_experiment
$13
1463105043566
$8
workerId
$8
parosenb
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105058608
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
4
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$25
3444,505956,615688,818595
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$2383
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$88645
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}te

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 te	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	as: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	ass: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assi: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assign: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigne: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in u
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in ins
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instr
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instru
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruct
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 e 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 en 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enr 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enro 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrol 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enroll 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolle 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in as 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in ass 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assis 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assista 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistan 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_ 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_f 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_for 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no e
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no en
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enr
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enro
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrol
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enroll
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolle
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled &
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & as
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & ass
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assi
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assis
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assista
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistan
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_f
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_fo
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105877203
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
818595
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463105986296
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
5
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$32
3298,254689,706102,883622,900679
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$1704
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$21841
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onsig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onesig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

f,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some l
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some loo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some look
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some looku
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some nlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n:lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: elookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: enlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrylookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_i lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in |lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & A
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Ad
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Add
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | solookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | somlookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463106886975
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
900679
$19
time_end_experiment
$13
1463106929955
$20
time_diff_experiment
$7
1886389
$9
timestamp
$13
1463106930248
*52
$5
hmset
$8
io52ystm
$6
postId
$8
io52ystm
$21
time_start_experiment
$13
1463105043566
$8
workerId
$8
parosenb
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105058608
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
4
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$25
3444,505956,615688,818595
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$2383
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$88645
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}te

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}t

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 te	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 t	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 		 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in 	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	as: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	ass: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assi: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assign: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigne: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_t
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assis
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assista
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_f
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
       
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
      
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     as
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     ass
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assi
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assig
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigne
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to n
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to no
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in u
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in i
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in ins
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instr
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instru
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruc
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instruct
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
     assigned_to not in instructor_of
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 

sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
  
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 e 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 en 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enr 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enro 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrol 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enroll 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolle 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in  
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in as 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in ass 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assis 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assista 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistan 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_ 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_f 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 enrolled not in assistant_for 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no e
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no en
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enr
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enro
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrol
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enroll
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolle
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled &
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & 
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & as
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & ass
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assi
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assis
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assista
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistan
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_f
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_fo
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
{
 no enrolled & assistant_for
}
sig Assignment { 
	assigned_by: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in assigned_by.enrolled 
     assigned_to not in assigned_by.assistant_for
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.assigned_by.assistant_for or s in	 a.assigned_by.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463105877203
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
818595
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463105986296
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
5
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$32
3298,254689,706102,883622,900679
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$1704
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$21841
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onsig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

onesig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	#no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fact,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fac,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

fa,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

f,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}

,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
,//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some l
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some loo
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some look
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some looku
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some nlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n:lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: elookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: enlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entrylookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_inlookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_i lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_ilookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in |lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n]
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & 
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & A
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Ad
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Add
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | solookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | somlookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: entry_in | some lookup[n] & Addr
},//The following specifies an addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

one sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: entry_in | some lookup[n] & Addr
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463106886975
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
900679
$19
time_end_experiment
$13
1463106929955
$20
time_diff_experiment
$7
1886389
$8
comments
$25
Thanks for a great class.
$8
finished
$4
true
$9
timestamp
$13
1463106937018
*10
$5
hmset
$8
io7cirlz
$6
postId
$8
io7cirlz
$21
time_start_experiment
$13
1463242024014
$8
workerId
$8
sporncha
$9
timestamp
$13
1463242071035
*28
$5
hmset
$8
io7cirlz
$6
postId
$8
io7cirlz
$21
time_start_experiment
$13
1463242024014
$8
workerId
$8
sporncha
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242071202
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4732,688156
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$8242
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242759361
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
688159
$9
timestamp
$13
1463242895257
*44
$5
hmset
$8
io7cirlz
$6
postId
$8
io7cirlz
$21
time_start_experiment
$13
1463242024014
$8
workerId
$8
sporncha
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242071202
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4732,688156
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$8242
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242759361
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
688159
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463242895676
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$13
3665,19001440
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$703
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addr | a in n.^target_of
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$34261
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (tc & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    ( & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^() & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^( & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^t & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^tar & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^targ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target_ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^b.target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^(b.target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^(b.target_of) & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | ex
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exis
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exist
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exis
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exi
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | ex
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addre
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addres
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    as n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | ntarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of = 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of =
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | na.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | an.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a inn.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.(target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : A | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Ad | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Add | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addr | a in n.^target_of
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463261897117
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$8
19001441
$9
timestamp
$13
1463261937923
*48
$5
hmset
$8
io7cirlz
$6
postId
$8
io7cirlz
$21
time_start_experiment
$13
1463242024014
$8
workerId
$8
sporncha
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242071202
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4732,688156
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1182
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$8242
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled &
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & 
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} {
  no (enrolled & assistant_for)
}
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463242759361
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
688159
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463242895676
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$13
3665,19001440
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$703
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addr | a in n.^target_of
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$34261
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
      
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (tc & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    ( & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^() & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^( & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^t & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^tar & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^targ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target_ & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^b.target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^(b.target_of & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    (^(b.target_of) & (Name -> Addr)).Addr = Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n:
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: N
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Na
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Nam
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | ex
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exis
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exist
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exis
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | exi
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | ex
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | e
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | s
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | so
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a :
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : A
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Ad
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Add
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addre
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addres
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address |
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | t
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | tar
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | targ
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target_
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    as n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
     n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    s n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    so n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | ntarget_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of = 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of =
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of 
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | na.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | an.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a inn.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    some n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    a n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    al n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.(target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Address | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : A | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Ad | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Add | a in n.^target_of
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
    all n: Name | some a : Addr | a in n.^target_of
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463261897117
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$8
19001441
$19
time_end_experiment
$13
1463261937899
$20
time_diff_experiment
$8
19913885
$9
timestamp
$13
1463261937943
*10
$5
hmset
$8
ioe9olxl
$6
postId
$8
ioe9olxl
$21
time_start_experiment
$13
1463660520976
$8
workerId
$4
sz22
$9
timestamp
$13
1463660529478
*10
$5
hmset
$8
ioehl54h
$6
postId
$8
ioehl54h
$21
time_start_experiment
$13
1463673796151
$8
workerId
$4
llu3
$9
timestamp
$13
1463673799899
*10
$5
hmset
$8
ioehslqj
$6
postId
$8
ioehslqj
$21
time_start_experiment
$13
1463674144272
$8
workerId
$9
100561113
$9
timestamp
$13
1463674198856
*28
$5
hmset
$8
ioehslqj
$6
postId
$8
ioehslqj
$21
time_start_experiment
$13
1463674144272
$8
workerId
$9
100561113
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674198211
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4603,163635
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1173
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$19943
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      弄
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674361847
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
163636
$9
timestamp
$13
1463674513825
*44
$5
hmset
$8
ioehslqj
$6
postId
$8
ioehslqj
$21
time_start_experiment
$13
1463674144272
$8
workerId
$9
100561113
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674198211
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4603,163635
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1173
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$19943
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      弄
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674361847
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
163636
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674513778
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3819,315074
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$2268
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lon Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lo Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->l Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->on Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674828852
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
315074
$9
timestamp
$13
1463675069776
*48
$5
hmset
$8
ioehslqj
$6
postId
$8
ioehslqj
$21
time_start_experiment
$13
1463674144272
$8
workerId
$9
100561113
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674198211
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4603,163635
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1173
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$19943
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      弄
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674361847
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
163636
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674513778
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3819,315074
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$2268
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lon Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lo Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->l Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->on Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674828852
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
315074
$19
time_end_experiment
$13
1463675069386
$20
time_diff_experiment
$6
925114
$9
timestamp
$13
1463675069810
*52
$5
hmset
$8
ioehslqj
$6
postId
$8
ioehslqj
$21
time_start_experiment
$13
1463674144272
$8
workerId
$9
100561113
$12
experimentID
$35
modules/+GOC.html,modules/+AOC.html
$47
_start_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674198211
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+GOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC
$11
4603,163635
$47
_specs_modules/+GOC.html,modules/+AOC.html_+GOC
$1173
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+GOC
$19943
//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      弄
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s &
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & 
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.a
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.as
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.ass
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assi
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assig
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assign
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigne
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_t
},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.
abstract sig Person {} 
sig Student extends Person {} 
sig Professor extends Person {} 
sig Class { 
	enrolled: set Student, 
	assistant_for: set Student, 
	instructor_of: one Professor 
} 
sig Assignment { 
	associated_with: one Class, 
	assigned_to: some Student 
} {
	 assigned_to in associated_with.enrolled 
}

pred PolicyAllowsGrading(s: Person, a: Assignment) { 
	s in a.associated_with.assistant_for or s in a.associated_with.instructor_of
      no s & a.assigned_to
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+GOC
$13
1463674361847
$48
_result_modules/+GOC.html,modules/+AOC.html_+GOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+GOC
$6
163636
$47
_start_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674513778
$48
_clicks_modules/+GOC.html,modules/+AOC.html_+AOC
$1
2
$51
_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC
$11
3819,315074
$47
_specs_modules/+GOC.html,modules/+AOC.html_+AOC
$650
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$49
_changes_modules/+GOC.html,modules/+AOC.html_+AOC
$2268
//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lone Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lon Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->lo Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->l Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in-> Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->on Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
},//The following specifies and addressbook which consists of Targets (Names or Addresses).
abstract sig Target { }
sig Addr extends Target { }
sig Name extends Target { }

sig Book {
	entry_in: set Name,
	target_of: entry_in->one Target
} {
	no n: Name | n in lookup[n]
	all n,l: Name | l in lookup[n] implies l in entry_in
}
$45
_end_modules/+GOC.html,modules/+AOC.html_+AOC
$13
1463674828852
$48
_result_modules/+GOC.html,modules/+AOC.html_+AOC
$4
PASS
$46
_time_modules/+GOC.html,modules/+AOC.html_+AOC
$6
315074
$19
time_end_experiment
$13
1463675069386
$20
time_diff_experiment
$6
925114
$8
comments
$23
No additional comments.
$8
finished
$4
true
$9
timestamp
$13
1463675123236
