tims class data
"workerId","postId","experimentID","formerTask","latterTask","_clicks_modules/+GOC.html,modules/+AOC.html_+GOC","_time_modules/+GOC.html,modules/+AOC.html_+GOC","_clicktime_modules/+GOC.html,modules/+AOC.html_+GOC","_specs_modules/+GOC.html,modules/+AOC.html_+GOC","_result_modules/+GOC.html,modules/+AOC.html_+GOC","_changes_modules/+GOC.html,modules/+AOC.html_+GOC","_clicks_modules/+GOC.html,modules/+AOC.html_+AOC","_time_modules/+GOC.html,modules/+AOC.html_+AOC","_clicktime_modules/+GOC.html,modules/+AOC.html_+AOC","_specs_modules/+GOC.html,modules/+AOC.html_+AOC","_result_modules/+GOC.html,modules/+AOC.html_+AOC","_changes_modules/+GOC.html,modules/+AOC.html_+AOC"
"cstanfor","intogpau","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","946535","3060,946533","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - asso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - assoc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associat\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","383825","2987,383823","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"ajl4","intg18nv","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","111366","3745,111365","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nf\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nfa\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nfac\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nfac=\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nfac\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nfa\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nf\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n    \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled -\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - asso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - assoc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associa\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associat\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_w\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_wit\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_fo\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","3","410022","3091,330557,410021","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in ^lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in n.^(b.target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in n.^(btarget_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->o Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->on Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in n.^(target_of)\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in l\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lo\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in loo\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in look\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in looku\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n}"
"B01044526","inw0l7w3","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","5045611","3228,5045610","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n al \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s:  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: S \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: St \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Stu \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Stud \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Stude \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Studen \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student | \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in e\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in a\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in as\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in ass\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assi\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assis\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assist\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assista\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistan\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant fo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant fo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_fo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for i\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for im\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for impl\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for impli\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in A\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in e\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: Student |\n   s in assistant_for implies s not in enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assign\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to no\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to no\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in asso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in assoc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associa\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_w\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_wit\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistn\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant fo\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistantfor\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     assigned_to in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     noassigned_to in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     notassigned_to in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n}","2","218296","3361,218295","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"B00770121","int3p2c4","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","3","360202","3234,216431,360201","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n     not assigned_to in associated_with.instructor_of\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled & assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n       \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n        \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n         \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n    not s in a.assigned_to     \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n  \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n   \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n    \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n     not assigned_to in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     not assigned_to in associated_with.assistant_for\n     not assigned_to in associated_with.instructor_of\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no e\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no en\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enr\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enro\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrol\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enroll\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolle\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled a\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled an\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and as\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and ass\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assi\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assis\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assist\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assista\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistan\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_f\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n    \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n   \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no e\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no en\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enr\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enro\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrol\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enroll\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolle\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled a\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled an\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and i\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and in\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and ins\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and inst\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instr\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instruc\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instruct\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructo\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_o\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n    \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n   \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled and instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled an&d instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled &d instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled and assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled an assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled a assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled  assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled & assistant_for\n  no enrolled & instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","541106","2992,541106","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (n.^(target_of) & Addr)\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: bentry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n:entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (ln.^(b.target_of) & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (n.^(b.target_of) & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (n.^(btarget_of) & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: entry_in | some (n.^(target_of) & Addr)\n}"
"jas14","inte07zo","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","141860","3404,141859","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to)\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of/0\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of/\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) an\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s no\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.as\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.ass\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assi\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assig\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assign\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigne\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_n\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_t\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of) and (s not in a.assigned_to)\n}","2","79241","3682,79241","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"100633136","inut46q1","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","178013","4186,178013","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no e \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enr \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled &&  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && ass \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && asi \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && asis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled && \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled &  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & ass \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assi \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assist \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_fo \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no en\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enroll\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no enr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no en\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no e\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n no enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","388842","3385,388842","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Targe\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Targ\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Tar\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Ta\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone T\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone \n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone A\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Ad\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Add\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Add\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Ad\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone A\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone \n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone T\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Tar\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Targ\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"peter","intmgii5","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","211501","3235,211500","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdienrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisjenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled,: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, : set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, a: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, as: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, ass: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assi: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assis: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assist: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistan: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_f: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_fo: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","5","1215625","3092,731166,1048913,1152342,1215624","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nlone sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some a: Addr | a in n.(^target_of)\n}\n","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name <\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name <:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name <\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | somea\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarhg\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarhge\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarhget\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarhge\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarhg\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tarh\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^targeg\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target_f\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<:target_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name<target_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nametarget_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name target_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name &target_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of. | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.u | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.uni | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nlsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nlonsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nlonesig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nlone sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\n sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nf,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfac,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact a,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact al,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact all,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact al,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact a,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact com,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact comp,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact com,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact c,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact co,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact cov,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact cover,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact covera,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverag,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverage,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageO,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOf,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfN,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNam,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfName,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  a\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  al\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n:\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: N\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: Nam\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: Name\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: Nam\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: Na\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: N\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n: \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n:\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all n\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  all\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  al\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  a\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n  \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n   \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    N\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Nam\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name i\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in \n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in B\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Bo\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Boo\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.e\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.en\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.ent\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entr\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n      \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n     \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n    \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n   \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n  \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n \n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name & target_of.univ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: e | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: ent | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entr | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_ | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some a: Addr | a in n.(^target_of)\n}\n\nfact coverageOfNames {\n    Name in Book.entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some a: Addr | a in n.(^target_of)\n}\n\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some a: Addr | a in n.(^target_of)\n}\n"
"iboros","io3lt3qc","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","200705","3687,200704","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} P\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tn \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno ass \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assi \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assista \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_f \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for &  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enr \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n      \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n     \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n     n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n     \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no i\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no ins\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no inst\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instru\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instruc\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of &\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & e\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enc\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n    no instructor_of & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\\\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\\\\\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\\\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\\,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n/,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n//,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// atle,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// atl,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// ater,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// ate,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// at,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// a,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// al,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alt,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alter,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// altern,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alterna,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternati,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative w,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative wa,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\n,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npr,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npre,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred ,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred P,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred Po,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\n,//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading22(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading222(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading22(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \t\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in as\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in asso\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in assoc\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associ\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associat\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associate\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_wi\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_wit\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.as\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assi\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assis\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assist\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assista\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistan\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant_fo\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant_for\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in associated_with.assistant_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in aassociated_with.assistant_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.-associated_with.assistant_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.as\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.asso\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associ\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associat\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associate\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_wi\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.i\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.ins\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.inst\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instr\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instruc\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instruct\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructo\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_f\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for  \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.as\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.asso\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associ\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associat\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associate\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_wi\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.s\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stdu\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.std\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.st\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stud\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.stude\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.studen\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}\n\n// alternative way\npred PolicyAllowsGrading2(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for  + a.associated_with.instructor_for - a.associated_with.student\n}","2","549944","3255,549942","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in = target_of.Target\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of,\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of.T\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of.Tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of.Targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in i target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in  target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in = target_of.Target\n}"
"100705901","io2317uh","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","84563646","4641,84563646","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n al \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s:  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: e \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: ent \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enr \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enroll \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled | \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \t\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in a\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in as\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in ass\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assi\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assis\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assist\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assista\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistan\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistant_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistant_f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n all s: enrolled |\n   \ts not in assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","8","16244001","4123,15068529,15633915,15967141,16032705,16068205,16154360,16244001","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l not in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n}","FAIL","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies sl in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies soml in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies somel in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.^in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.tin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.tain entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.tarin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targetin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targetsin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targetin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_oin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_ofin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of ry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of y_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of _in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.target_of in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targetin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.targetsin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.^in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l.in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies somel in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tag\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n   \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n  \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tal\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      \t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      soom\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      soome\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      soom\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      soo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n im\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n impl\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implie\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | \n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | a\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | al\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all \n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b:\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: \n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: B\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Bo\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Boo\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book \n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some target_of.n implies some n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some target_of.n implies some n.^(target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some target_of.n implies some n.^(btarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some target_of.n implies some n.^(b.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some target_of.n implies some n.^(b.target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some btarget_of.n implies some n.^(b.target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some b.target_of.n implies some n.^(b.target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some b.target_of).n implies some n.^(b.target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      \t\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      l\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      le\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 =\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.t\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.ta\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.tar\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.targ\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_o\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of \n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      some (b.target_of).n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      some (b.n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      some (b1.n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      some b1.n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^(b.target_of) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^() & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^) & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^ & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^b & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | all b: Book |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name | \n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = b.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = t.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = thi.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = this.target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \tall n: Name |\n      let b1 = target_of |\n      \tsome b1.n implies some n.^b1 & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l nin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l noin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l notin entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l not in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some loo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some looku\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall dn,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall din,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall disn,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall disjn,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall disj n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies some lookup[l] & Addr\n}"
"B00769728","io24j4ka","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","471471","4620,471470","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno assistant_for & enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","373780","3594,373779","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \tall n : Name | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : e | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : en | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : ent | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entr | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry- | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_ | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | n in entry_in implies n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in |  n in target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | n in target_of.Target\n}"
"100647253","intmey75","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","691245","3703,691244","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \t\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tn\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno en\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enr\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enroll\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled &\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & a\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & as\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & ass\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assi\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assis\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assista\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistan\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_fo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n} \n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","549369","2782,549367","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddr {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nassert lookupYields {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfa lookupYields {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfac lookupYields {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact lookupYields {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact n {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact na {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nam {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact name {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameL {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLe {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLead {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeads {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadst {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeads {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsT {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsTo {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToA {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAd {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAdd {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddre {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddres {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddress {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddres {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddre {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddr {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAdd {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact nameLeadsToAddr {\n\tall b: Book, n: b.entry_in | some (lookup [b,n] & Addr)\n}"
"100561113","ioehslqj","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","163636","4603,163635","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigned_to\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s &\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s & \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s &\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      弄\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s &\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.as\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.ass\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assi\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assig\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assign\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigne\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigned\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigned_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigned_t\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      no s & a.assigned_to\n}","2","315074","3819,315074","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lon Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lo Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->l Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->on Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"parosenb","io52ystm","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","4","818595","3444,505956,615688,818595","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant_for\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \ta.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\ta.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}t\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}te\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}t\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t \t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t te\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t \t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in \t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tas: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tass: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassi: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassign: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigne: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_t\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to no\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in u\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in ins\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instr\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instru\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instruc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instruct\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instructor\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instructor_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n     assigned_to not in instructor_of\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n  \nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n e \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n en \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enr \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enro \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrol \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enroll \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolle \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled  \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled no \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not  \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in  \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in as \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in ass \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assis \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assista \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assistan \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assistant \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assistant_ \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assistant_f \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n enrolled not in assistant_for \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no e\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no en\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enr\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enro\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrol\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enroll\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolle\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled &\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & \n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & as\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & ass\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assi\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assis\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assista\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistan\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant_\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant_f\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant_fo\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n no enrolled & assistant_for\n}\nsig Assignment { \n\tassigned_by: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in assigned_by.enrolled \n     assigned_to not in assigned_by.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.assigned_by.assistant_for or s in\t a.assigned_by.instructor_of \n}","5","900679","3298,254689,706102,883622,900679","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | some lookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some lookup[n] & Addr\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nonsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nonesig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t#no n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t#no n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfa,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfac,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfac,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfa,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nf,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n,//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some l\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some lo\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some loo\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some look\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some looku\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some lookup\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some lookup[\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some nlookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n:lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: elookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: enlookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entrlookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entrylookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_ilookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_inlookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_inlookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_i lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_ilookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in |lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n]\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] & \n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] & A\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] & Ad\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] & Add\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | lookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | solookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | somlookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: entry_in | some lookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a n: entry_in | some lookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al n: entry_in | some lookup[n] & Addr\n},//The following specifies an addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\none sig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: entry_in | some lookup[n] & Addr\n}"
"test","int1a40o","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","4","60718","2962,10925,25314,60718","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: set Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: on Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: o Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with:  Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: s Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: set Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: se Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: s Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with:  Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: n Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with:  Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: on Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \ten \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tenro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tenrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tenrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tenrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tenrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tnenrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tnoenrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled &\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & a\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & as\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & ass\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assis\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assist\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistan\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistant_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistant_fo\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \n{\n \tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","11286","2987,11285","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"sporncha","io7cirlz","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","688159","4732,688156","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no (enrolled & assistant_for)\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled &\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no enrolled & assistant_for)\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  no (enrolled & assistant_for)\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","19001441","3665,19001440","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Addr | a in n.^target_of\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (tc & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    ( & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^ & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^() & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^( & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^t & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^tar & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^targ & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^target & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^target_ & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^target_of & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^b.target_of & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^(b.target_of & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    (^(b.target_of) & (Name -> Addr)).Addr = Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | ex\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | exis\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | exist\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | exis\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | exi\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | ex\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Addre\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Addres\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    as n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | ntarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of = \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of =\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | na.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | an.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | a n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | a inn.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | some a : Address | a in n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a n: Name | some a : Address | a in n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al n: Name | some a : Address | a in n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | a in n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | a in n.(target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | a in n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Address | a in n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : A | a in n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Ad | a in n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Add | a in n.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some a : Addr | a in n.^target_of\n}"
"zlowry","inz3qabf","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","340872","3301,340871","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to & associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_t\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to no\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in assoc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associt\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associat\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_fo\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     noassigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to not i associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to not  associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to not associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to no associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to n associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to  associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to  associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     no assigned_to & associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","444274","3001,444273","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"100623278","inywhemj","modules/+GOC.html,modules/+AOC.html","+GOC","+AOC","2","347441","4940,347440","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - enrolled, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student , \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student -, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - , \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - e, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - en, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - enro, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - enrol, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - enrolle, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student - enrolled, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","218993","3416,218993","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->some Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->so Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->som Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->some Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"workerId","postId","experimentID","formerTask","latterTask","_clicks_modules/+GOM.html,modules/+AOM.html_+GOM","_time_modules/+GOM.html,modules/+AOM.html_+GOM","_clicktime_modules/+GOM.html,modules/+AOM.html_+GOM","_specs_modules/+GOM.html,modules/+AOM.html_+GOM","_result_modules/+GOM.html,modules/+AOM.html_+GOM","_changes_modules/+GOM.html,modules/+AOM.html_+GOM","_clicks_modules/+GOM.html,modules/+AOM.html_+AOM","_time_modules/+GOM.html,modules/+AOM.html_+AOM","_clicktime_modules/+GOM.html,modules/+AOM.html_+AOM","_specs_modules/+GOM.html,modules/+AOM.html_+AOM","_result_modules/+GOM.html,modules/+AOM.html_+AOM","_changes_modules/+GOM.html,modules/+AOM.html_+AOM"
"jllessin","int4c632","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","386497","3278,386496","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  AND\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  AND \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  AND\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  AN\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  A\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  and\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n  an\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\t\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno en\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enro\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrol\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolle\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & as\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assi\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assis\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assist\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assiste\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assist\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_f\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","4","910237","2962,735847,869071,910237","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & Addr\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npr,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npre,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred name,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameY,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYie,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYiel,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYield,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b :,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : B,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Bo,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book,,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n :,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : N,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Nam,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tso\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsom\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYiels (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYies (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYis (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYs (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred names (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameRs (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameRess (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameResos (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameResols (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameResolvs (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npre\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred n\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred na\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nam\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred name\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameY\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYie\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYiel\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYield\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b :\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : B\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Bo\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n :\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : N\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Nam\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name0 \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name0 {\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name0 \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name0\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n  \n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\t\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tna\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnam\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tname\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameR\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameRes\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameReso\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolv\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b,\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] o\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or som\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n'\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 :\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : N\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Nam\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name |\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name | \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name |\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t|\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 i\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.ta\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.tar\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.targ\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.target\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.target_\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in b.target_of\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in nb.target_of\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.b.target_of\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of)\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) an\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and n\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nam\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and name\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameY\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYie\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYiel\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYield\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields(\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b,\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, \n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     al\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     all \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     a\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : en\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : ent\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in |\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | na\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | name\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameY\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYie\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYiel\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYield\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [th\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [thi\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [this\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [this, \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [this, n\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | nameYields [this, n]\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    -all n : entry_in | nameYields [this, n]\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n      \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     al\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n :\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : en\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : ent\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in |\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | so\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some l\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lo\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some loo\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some look\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [th\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this,\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n]\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & \n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & A\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & Ad\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & Add\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    --all n : entry_in | nameYields [this, n]\n     all n : entry_in | some lookup [this, n] & Addr\n}\n\npred nameYields (b : Book, n : Name) {\n\tnameResolves [b, n] or some n2 : Name \n      \t| n2 in n.(b.target_of) and nameYields [b, n2]\n}\n\npred nameResolves (b : Book, n : Name) {\n\tsome b.target_of.n & Addr\n}"
"ecatlin","intr8wm5","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","3","160981","3723,110292,160980","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant_for \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled,: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, : set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, as: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, ass: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assi: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assis: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assista: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistan: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_f: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: diset Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disset Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disjset Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disj set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disj set Student, \n\n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled, assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled,assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolledassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled:assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: seassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: setassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Sassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Stassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Studassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Studeassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Studenassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Studentassistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n      assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n     assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: disj set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for:  set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s:  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: e \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enroll \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled |  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | { \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n      \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n      \n      \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n      \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \t \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts  \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in  \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in as \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in ass \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assi \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assist \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assista \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistan \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistantF \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant_ \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant_f \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student,\n    assistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno s: enrolled | {\n     \ts in assistant_for \n    }\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","3","291526","2795,160114,291525","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsome sig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lookup[n] \n        }\n    }\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsosig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsomsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsomesig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsome sig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n,\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n      \n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n      \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \t \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tso \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome  \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a:  \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: A \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Ad \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Add \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr  \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr |  \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | { \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n          \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n          \n          \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n          \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \t \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta  \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in  \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in l \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lo \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in look \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lookup \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lookup[ \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lookup[n \n        }\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | {\n     \tsome a: Addr | {\n         \ta in lookup[n] \n        }\n    }\n}"
"100563900","io35sbxv","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","447283","4665,447282","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \t\tc.assistant_for\n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nf\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfa\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfac\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact T\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact s\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact st\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact stu\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact stud\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact stude\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studen\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact student\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact students\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsN\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNo\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNot\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNot \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNot\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotT\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTA\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n  \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n  \n  \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n  \n  \n  \npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n  \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\t\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tf\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfo\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfora\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfora \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfora\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor a\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor al\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor all\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor all \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor all\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor al\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor a\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfor\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tfo\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tf\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\t\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\ta\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tal\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c :\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : C\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Cl\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Cla\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Clas\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class |\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class |\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class |\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | a\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | al\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s :\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : S\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : St\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Stu\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Stud\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Stude\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Studen\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student s\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student |\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s i\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.e\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.en\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enr\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enro\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrol\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enroll\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolle\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled i\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ip\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ipm\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ipml\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ipmli\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ipml\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ipm\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled ip\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled i\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled im\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled imp\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled impl\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled impli\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implie\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s n\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s no\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not i\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.a\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.as\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.ass\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assi\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assis\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assist\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assista\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistan\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistant\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_f\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_fo\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in c.assistant_for\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \tc.assistant_for\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \t\tc.assistant_for\n  \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \t\tc.assistant_for\n \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \t\tc.assistant_for\n\n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\nfact studentsNotTAS{\n\tall c : Class | all s : Student | s in c.enrolled implies s not in \t\tc.assistant_for\n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","121884","3162,121884","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lon Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lo Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->l Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->  Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> o Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> on Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in-> one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"fgoodman","inuju60s","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","171790","3957,171789","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\n\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfa\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfac\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact \n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  \n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  \n  \n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n \t \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact { \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  al\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s:\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: P\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Per\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Pers\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Perso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person |\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;;\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;; \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;; a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;; a:\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a;; a: \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | al\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a:\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: A\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: As\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assign\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignme\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment |\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | P\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Po\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Pol\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Poli\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Policy\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Policy \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | Policy\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyA\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAl\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAll\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllow\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllows\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsG\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGra\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrad\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGradi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s,\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a]\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] im\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] imp\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] impl\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implie\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assign\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\nfact {\n  all s: Person | all a: Assignment | PolicyAllowsGrading[s, a] implies not s in a.assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","92378","2777,92377","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr)\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\n,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfa,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfac,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  \n  ,//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact { \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: B\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Bo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Boo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (loo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b,\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] *\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] * \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] *\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}\n\nfact {\n  all b: Book, n: b.entry_in | some (lookup[b, n] & Addr)\n}"
"100605856","io4e1o7d","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","568747","4308,568747","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrolled) \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno ( \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assi \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assist \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assista \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_fo \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for +  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + in \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + ins \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instru \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instruc \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructo \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_o \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of)  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) &  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & ( \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enr \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrole \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enroll \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n \tno (assistant_for + instructor_of) & (enrolled) \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","866419","2641,866418","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some n.^target_of & Addr\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some .\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some.^target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some .^target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some n.^target_of & Addr\n}"
"imdavis","io4jdv0c","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","152062","3063,152060","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_for  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\t  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tn  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno   \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno e  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno en  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enr  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enro  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enroo  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrool  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enroole  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrooled  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrooled   \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrooled  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enroole  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrool  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enroo  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrool  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enroo  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enro  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrol  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolle  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled   \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled &  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled &   \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & a  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & as  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assi  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assis  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assista  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistan  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant.  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant.f  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant.for  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistantfor  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n\tno enrolled & assistant_for  \n}\n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","4","422376","3272,267267,339500,422375","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: T | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Tar | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Tarh | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Tar | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Targ | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Target | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: N | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Nam | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some Addr & entry_in\n}"
"ndemarin","io297dny","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","423186","3562,423186","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) and\n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts no\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts not \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts not\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts no\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts n\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s no\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not i\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.s\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.sc\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.s\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.as\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.ass\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.asso\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.assoc\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associa\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associat\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associate\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_wi\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.e\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.en\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enr\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enro\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrol\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolle\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled)\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) a\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) an\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) and\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) and\n\t()s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) and\n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \t(s not in a.associated_with.enrolled) and\n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n}","3","1105779","2848,963489,1105779","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \t(some lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n      \t(some lookup[n] & Addr)\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | ()\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | (s)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | (sm)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | (s)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | ()\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | (\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tso\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsom\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome looki\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \t)some lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \tsome lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some n: Name | \n      \t(some lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a n: Name | \n      \t(some lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al n: Name | \n      \t(some lookup[n] & Addr)\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n      \t(some lookup[n] & Addr)\n}"
"bnavetta","intmbc9n","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","3","305906","5929,195094,305905","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnot (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tns in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnos in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnot s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnot (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnot (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of )\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tnot (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t-not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s n\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not i\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in as\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in asso\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associ\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associa\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associat\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associate\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_w\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_wi\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_wit\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with.\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with.a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with.as\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with.assi\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in associated_with.assis\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in aassociated_with.assis\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assis\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assist\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistan\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_f\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_fo\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s n\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not i\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not (s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--not s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--nots in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--nos in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t--s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of)\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n      \n      s not in a.associated_with.assistant_for\n      s not in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t-s in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - asso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associa\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associat\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_w\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_wit\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_fo\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled - associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n}","4","216480","2233,132852,160135,216480","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_of\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some enttarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entrtarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entrytarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_oftarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_of.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_o.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_i.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n-\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->T\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_f\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n    all n: entry_in | some n->Target & target_of\n}"
"azhang6","int7x8nf","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","488408","2602,488407","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n    s not in a.assigned_to) or\n    s in a.associated_with.instructor_of\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for a or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for an or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and  or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s  or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s n or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s no or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s not or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s not  or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and  or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     sor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s noor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s notor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not ior s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not inor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.asor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assior s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assignor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigneor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assignedor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_toor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to_or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_toor s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to)or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o\n      s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o\n     s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o\n    s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o\n     s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n     s not in a.assigned_to) o\n    s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n    s not in a.assigned_to) o\n    s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n    s not in a.assigned_to) or\n    s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and\n    s not in a.assigned_to) or\n    s in a.associated_with.instructor_of\n}","2","196939","2239,196938","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
"samercha","int8ag1z","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","570178","2468,570178","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigned_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\tss in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts nos in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not ins in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in as in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.as in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.ass in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.asss in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assos in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assocs in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associs in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associas in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associates in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associateds in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_ws in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_wos in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_ws in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_wis in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_withs in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_with.s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_tos in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to ans in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to and s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to and {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_t and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated_ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associated and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associate and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associat and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associa and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.associ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assoc and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.asso and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.ass and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assi and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assig and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assign and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigne and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigned and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigned_ and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigned_t and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts not in a.assigned_to and { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of }\n}","3","737281","2452,287636,737281","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & Addr)\n    }\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone A\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Ad\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Add\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n:\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      si\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      sie\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      si\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      s\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      som\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^ta\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^tar\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^targ\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of &\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & \n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & A\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & Ad\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & Add\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & Addr\n    }\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Addr\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n    {\n      some (n.^target_of & Addr)\n    }\n}"
"llu3","io3js0s4","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","23771","2574,23771","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\t(s in a.associated_with.assistant_for and s not in a.associated_with.enrolled) or s in a.associated_with.instructor_of\n}","2","39625","2761,39625","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies some n.target_of & Target\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name +\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in im\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in imp\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in impl\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in impli\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implie\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & T\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & Tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & Targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & Targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies n.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies sn.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies son.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies soon.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies soomn.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies soon.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies son.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies somen.target_of & Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | n in entry_in implies some n.target_of & Target\n}"
"skaramch","int57xcl","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","198036","2708,198036","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n    \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   d \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   di \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   dis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj e \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled ass \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assist \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assista \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistan_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistant_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistant_f \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistant_fo \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   disj enrolled assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no e \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no en \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enro \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrol \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enroll \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolle \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & a \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & as \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & ass \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assis \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assista \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistan \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistant \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistant_ \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistant_f \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n   no enrolled & assistant_for \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","252332","2557,252332","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & Addr\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some loo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some looku\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n: Name | some lookup[n] & Addr\n}"
"kjmyerso","inukus8w","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","262187","2731,262186","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{ \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n \t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\t \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tn \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  enrolled\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  enrolled \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  enrolled &\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  enrolled & \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno  enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n}{\n\tno enrolled & assistant_for\n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","5","946044","2366,387755,690476,721382,946044","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lookup[n]\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n   \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n  \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]/\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//th\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//thi\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this m\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this mak\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this make\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes i\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it ac\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acy\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyc\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acycl\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in/\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//thi\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this ma\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this make\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so th\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so that\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so tha\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so th\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes it\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this makes\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this make\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this mak\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this ma\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this m\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//this\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//thi\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//th\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in//\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in/\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n      \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n      /\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n      //\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n      /\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n      \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n     \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    /\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //th\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //thi\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this on\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one ma\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one make\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes i\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes it \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {//this makes it acyclic\n\tno n: Name | n in lookup[n]//this makes it acyclic\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  \n\tno n: Name | n in lookup[n]\n      \n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n\tno n: Name | n in lookup[n]\n      //this makes it acyclic\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n\tno n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\nno n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclicno n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n    //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n   //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n  //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n //this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n  //this makes it acyclic\n  no n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n //this makes it acyclic\n  no n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n//this makes it acyclic\n  no n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n  no n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n no n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\nno n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this one makes it so\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this ma\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this make\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this makes\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this makes \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this makes\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this make\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mak\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this ma\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this m\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this ma\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this man\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mand\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandea\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mande\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mand\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this manda\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandat\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates th\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates that\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates that \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tn n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\ta n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tal n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] i\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] im\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] impl\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] impli\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n =\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some loo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some looki\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookip\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some looki\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some looku\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] a\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] an\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] and\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] and \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookip\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookip\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] and \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookup[n]\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : Name | some lookip\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = lookup[n] \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies n = \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n] implies\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tall n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandates that \n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mand\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this mandea\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\t//this m\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\t//this makes it acyclic\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    a\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    al\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Name |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Name \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Name\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Nam\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :Na\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :N\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n :\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in  \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in |\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some l\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some loo\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some look\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some looku\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lookup\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lookup[\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lookup[n\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    all n : entry_in | some lookup[n]\n}"
"100516010","inwirzhe","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","2","433059","2565,433058","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {assigned_to in associated_with.enrolled \n}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {assigned_to in associated_with.enrolled }\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {assigned_to in associated_with.enrolled}\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  \ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\ns in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n      \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n     \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n    \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n   \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s i\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s in\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s i\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s no\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not i\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.as\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.ass\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assi\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assig\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assign\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigne\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_t\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdienrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdijenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdienrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisjenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled,: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, : set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, : set Student, \n\t: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\t: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of and\n  s not in a.assigned_to\n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tdisj enrolled, assistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) {\n  s in a.associated_with.assistant_for or s in a.associated_with.instructor_of\n}","3","955293","2450,524594,955293","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target | t in lookup[n] implies t in entry_in\n    target_of.Target = entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n      \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n     \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targe\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some ta\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    som\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    so\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    s\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some t\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_o\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some ntarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some etarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some enttarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entrytarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_itarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_intarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in:target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: enttarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entrtarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entrytarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entry_target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entry_itarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entry_intarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in: entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in  entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in | entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in  entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_intarget_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of &\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & A\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Ad\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Add\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    nsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^bsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^tsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^tarsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^targsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^targetsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_osome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_ofsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_of)some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_ofsome entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_of some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_of  some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_of some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    j\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    \n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no \n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no e\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no ent\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entr\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entryi\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_i\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.t\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.tar\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.targ\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.target\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.target_\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.target_o\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    no entry_in.target_of\n      n.^target_of \n      some entry_in.target_of & Addr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    en\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in.\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in.T\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in.Tar\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in.Targ\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    entry_in.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    T.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    .Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    t.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    tar.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    targ.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = \n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = e\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = ent\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entr\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_i\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name,  | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l: | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l:  | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l: T | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l:  | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l: | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, l | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name,  | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t:  | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: T | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Tar | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Targ | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target | l in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target |  in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target | t in lookup[n] implies l in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target | t in lookup[n] implies  in entry_in\n    target_of.Target = entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n: Name, t: Target | t in lookup[n] implies t in entry_in\n    target_of.Target = entry_in\n}"
"100719104","inure0bl","modules/+GOM.html,modules/+AOM.html","+GOM","+AOM","4","513309","2943,173133,410702,513308","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","PASS","//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\t\n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: one Class, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: , \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: s, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: se, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set , \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set S, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set St, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set Stu, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set Stud, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set Stude, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set Studen, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n\tassociated_with: set Student, \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {\n \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person { \n} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person { } \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n       \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n      \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assign\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigne\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_t\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to no\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not i\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in \n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in asso\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in assoc\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associ\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associa\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associat\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associate\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_w\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_wi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_wit\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.a\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.as\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assig\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.ass\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assi\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assis\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assist\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assista\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistan\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_f\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_fo\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n  \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} {\n  \n}\nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tenrolled: set Student, \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\t\n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n      \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n     \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-a, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-as, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-ass, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assi, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assis, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assist, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assista, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistan, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistant, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistant_, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistant_f, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistant_fo, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set Student-assistant_for, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for, \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n},//The following specifies a class grading policy consisting of Persons (Students or Professors), Classes, and Assignments.\nabstract sig Person {} \nsig Student extends Person {} \nsig Professor extends Person {} \nsig Class { \n\tassistant_for: set Student, \n    enrolled: set (Student-assistant_for), \n\tinstructor_of: one Professor \n} \nsig Assignment { \n\tassociated_with: one Class, \n\tassigned_to: some Student \n} {\n\t assigned_to in associated_with.enrolled\n     assigned_to not in associated_with.assistant_for\n}\n\npred PolicyAllowsGrading(s: Person, a: Assignment) { \n\ts in a.associated_with.assistant_for or s in a.associated_with.instructor_of \n}","2","295013","2249,295013","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}","PASS","//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->lone Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n},//The following specifies and addressbook which consists of Targets (Names or Addresses).\nabstract sig Target { }\nsig Addr extends Target { }\nsig Name extends Target { }\n\nsig Book {\n\tentry_in: set Name,\n\ttarget_of: entry_in->one Target\n} {\n\tno n: Name | n in lookup[n]\n\tall n,l: Name | l in lookup[n] implies l in entry_in\n}"
